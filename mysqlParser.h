/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : mysql.g
 *     -                            On : 2010-11-17 08:42:50
 *     -                for the parser : mysqlParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser mysqlParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pmysqlParser, which is returned from a call to mysqlParserNew().
 *
 * The methods in pmysqlParser are  as follows:
 *
 *  - mysqlParser_start_rule_return      pmysqlParser->start_rule(pmysqlParser)
 *  - mysqlParser_unlock_tables_statement_return      pmysqlParser->unlock_tables_statement(pmysqlParser)
 *  - mysqlParser_lock_tables_statement_return      pmysqlParser->lock_tables_statement(pmysqlParser)
 *  - mysqlParser_lock_tables_tablename_return      pmysqlParser->lock_tables_tablename(pmysqlParser)
 *  - mysqlParser_table_lock_type_return      pmysqlParser->table_lock_type(pmysqlParser)
 *  - mysqlParser_use_database_statement_return      pmysqlParser->use_database_statement(pmysqlParser)
 *  - mysqlParser_show_databases_statement_return      pmysqlParser->show_databases_statement(pmysqlParser)
 *  - mysqlParser_show_tables_statement_return      pmysqlParser->show_tables_statement(pmysqlParser)
 *  - mysqlParser_show_tables_from_return      pmysqlParser->show_tables_from(pmysqlParser)
 *  - mysqlParser_show_tables_like_return      pmysqlParser->show_tables_like(pmysqlParser)
 *  - mysqlParser_show_tables_where_return      pmysqlParser->show_tables_where(pmysqlParser)
 *  - mysqlParser_create_database_statement_return      pmysqlParser->create_database_statement(pmysqlParser)
 *  - mysqlParser_create_database_options_return      pmysqlParser->create_database_options(pmysqlParser)
 *  - mysqlParser_create_table_statement_return      pmysqlParser->create_table_statement(pmysqlParser)
 *  - mysqlParser_table_create_like_return      pmysqlParser->table_create_like(pmysqlParser)
 *  - mysqlParser_create_definition_return      pmysqlParser->create_definition(pmysqlParser)
 *  - mysqlParser_column_definition_return      pmysqlParser->column_definition(pmysqlParser)
 *  - mysqlParser_column_definition_options_return      pmysqlParser->column_definition_options(pmysqlParser)
 *  - mysqlParser_column_definition_collate_return      pmysqlParser->column_definition_collate(pmysqlParser)
 *  - mysqlParser_column_definition_charset_return      pmysqlParser->column_definition_charset(pmysqlParser)
 *  - mysqlParser_column_definition_default_return      pmysqlParser->column_definition_default(pmysqlParser)
 *  - mysqlParser_column_definition_onupdate_return      pmysqlParser->column_definition_onupdate(pmysqlParser)
 *  - mysqlParser_column_constraint_definition_return      pmysqlParser->column_constraint_definition(pmysqlParser)
 *  - mysqlParser_constraint_primary_key_return      pmysqlParser->constraint_primary_key(pmysqlParser)
 *  - mysqlParser_constraint_unique_key_return      pmysqlParser->constraint_unique_key(pmysqlParser)
 *  - mysqlParser_constraint_unique_key_name_return      pmysqlParser->constraint_unique_key_name(pmysqlParser)
 *  - mysqlParser_constraint_index_key_return      pmysqlParser->constraint_index_key(pmysqlParser)
 *  - mysqlParser_constraint_index_colname_return      pmysqlParser->constraint_index_colname(pmysqlParser)
 *  - mysqlParser_constraint_fulltext_index_key_return      pmysqlParser->constraint_fulltext_index_key(pmysqlParser)
 *  - mysqlParser_constraint_table_key_return      pmysqlParser->constraint_table_key(pmysqlParser)
 *  - mysqlParser_constraint_reference_definition_return      pmysqlParser->constraint_reference_definition(pmysqlParser)
 *  - mysqlParser_constraint_reference_option_return      pmysqlParser->constraint_reference_option(pmysqlParser)
 *  - mysqlParser_constraint_name_return      pmysqlParser->constraint_name(pmysqlParser)
 *  - mysqlParser_index_type_return      pmysqlParser->index_type(pmysqlParser)
 *  - mysqlParser_index_option_return      pmysqlParser->index_option(pmysqlParser)
 *  - mysqlParser_table_options_return      pmysqlParser->table_options(pmysqlParser)
 *  - mysqlParser_drop_statement_return      pmysqlParser->drop_statement(pmysqlParser)
 *  - mysqlParser_delete_statement_return      pmysqlParser->delete_statement(pmysqlParser)
 *  - mysqlParser_merge_statement_return      pmysqlParser->merge_statement(pmysqlParser)
 *  - mysqlParser_merge_update_clause_return      pmysqlParser->merge_update_clause(pmysqlParser)
 *  - mysqlParser_merge_insert_clause_return      pmysqlParser->merge_insert_clause(pmysqlParser)
 *  - mysqlParser_insert_statement_return      pmysqlParser->insert_statement(pmysqlParser)
 *  - mysqlParser_single_table_insert_return      pmysqlParser->single_table_insert(pmysqlParser)
 *  - mysqlParser_insert_into_clause_return      pmysqlParser->insert_into_clause(pmysqlParser)
 *  - mysqlParser_values_clause_return      pmysqlParser->values_clause(pmysqlParser)
 *  - mysqlParser_returning_clause_return      pmysqlParser->returning_clause(pmysqlParser)
 *  - mysqlParser_multi_table_insert_return      pmysqlParser->multi_table_insert(pmysqlParser)
 *  - mysqlParser_conditional_insert_clause_return      pmysqlParser->conditional_insert_clause(pmysqlParser)
 *  - mysqlParser_dml_table_expression_clause_return      pmysqlParser->dml_table_expression_clause(pmysqlParser)
 *  - mysqlParser_error_logging_clause_return      pmysqlParser->error_logging_clause(pmysqlParser)
 *  - mysqlParser_data_item_return      pmysqlParser->data_item(pmysqlParser)
 *  - mysqlParser_update_statement_return      pmysqlParser->update_statement(pmysqlParser)
 *  - mysqlParser_update_set_clause_return      pmysqlParser->update_set_clause(pmysqlParser)
 *  - mysqlParser_select_statement_return      pmysqlParser->select_statement(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_return      pmysqlParser->subquery_factoring_clause(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_part_first_return      pmysqlParser->subquery_factoring_clause_part_first(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_part_next_return      pmysqlParser->subquery_factoring_clause_part_next(pmysqlParser)
 *  - mysqlParser_search_clause_return      pmysqlParser->search_clause(pmysqlParser)
 *  - mysqlParser_cycle_clause_return      pmysqlParser->cycle_clause(pmysqlParser)
 *  - mysqlParser_select_hint_return      pmysqlParser->select_hint(pmysqlParser)
 *  - mysqlParser_select_list_return      pmysqlParser->select_list(pmysqlParser)
 *  - mysqlParser_displayed_column_part_first_return      pmysqlParser->displayed_column_part_first(pmysqlParser)
 *  - mysqlParser_displayed_column_part_next_return      pmysqlParser->displayed_column_part_next(pmysqlParser)
 *  - mysqlParser_displayed_column_return      pmysqlParser->displayed_column(pmysqlParser)
 *  - mysqlParser_mysql_server_variable_return      pmysqlParser->mysql_server_variable(pmysqlParser)
 *  - mysqlParser_sql_expression_return      pmysqlParser->sql_expression(pmysqlParser)
 *  - mysqlParser_expr_add_return      pmysqlParser->expr_add(pmysqlParser)
 *  - mysqlParser_expr_mul_return      pmysqlParser->expr_mul(pmysqlParser)
 *  - mysqlParser_expr_sign_return      pmysqlParser->expr_sign(pmysqlParser)
 *  - mysqlParser_expr_pow_return      pmysqlParser->expr_pow(pmysqlParser)
 *  - mysqlParser_expr_expr_return      pmysqlParser->expr_expr(pmysqlParser)
 *  - mysqlParser_expr_paren_return      pmysqlParser->expr_paren(pmysqlParser)
 *  - mysqlParser_nested_expression_return      pmysqlParser->nested_expression(pmysqlParser)
 *  - mysqlParser_function_expression_return      pmysqlParser->function_expression(pmysqlParser)
 *  - mysqlParser_call_parameters_return      pmysqlParser->call_parameters(pmysqlParser)
 *  - mysqlParser_call_parameter_return      pmysqlParser->call_parameter(pmysqlParser)
 *  - mysqlParser_parameter_name_return      pmysqlParser->parameter_name(pmysqlParser)
 *  - mysqlParser_case_expression_return      pmysqlParser->case_expression(pmysqlParser)
 *  - mysqlParser_simple_case_expression_return      pmysqlParser->simple_case_expression(pmysqlParser)
 *  - mysqlParser_searched_case_expression_return      pmysqlParser->searched_case_expression(pmysqlParser)
 *  - mysqlParser_else_case_expression_return      pmysqlParser->else_case_expression(pmysqlParser)
 *  - mysqlParser_simple_expression_return      pmysqlParser->simple_expression(pmysqlParser)
 *  - mysqlParser_subquery_return      pmysqlParser->subquery(pmysqlParser)
 *  - mysqlParser_datetime_expression_return      pmysqlParser->datetime_expression(pmysqlParser)
 *  - mysqlParser_interval_expression_return      pmysqlParser->interval_expression(pmysqlParser)
 *  - mysqlParser_special_expression_return      pmysqlParser->special_expression(pmysqlParser)
 *  - mysqlParser_cluster_set_clause_return      pmysqlParser->cluster_set_clause(pmysqlParser)
 *  - mysqlParser_cast_expression_return      pmysqlParser->cast_expression(pmysqlParser)
 *  - mysqlParser_datatype_return      pmysqlParser->datatype(pmysqlParser)
 *  - mysqlParser_r_enum_return      pmysqlParser->r_enum(pmysqlParser)
 *  - mysqlParser_r_int_return      pmysqlParser->r_int(pmysqlParser)
 *  - mysqlParser_r_tinyint_return      pmysqlParser->r_tinyint(pmysqlParser)
 *  - mysqlParser_r_smallint_return      pmysqlParser->r_smallint(pmysqlParser)
 *  - mysqlParser_bigint_return      pmysqlParser->bigint(pmysqlParser)
 *  - mysqlParser_r_unsigned_return      pmysqlParser->r_unsigned(pmysqlParser)
 *  - mysqlParser_boolean_literal_return      pmysqlParser->boolean_literal(pmysqlParser)
 *  - mysqlParser_t_alias_return      pmysqlParser->t_alias(pmysqlParser)
 *  - mysqlParser_c_alias_return      pmysqlParser->c_alias(pmysqlParser)
 *  - mysqlParser_alias_return      pmysqlParser->alias(pmysqlParser)
 *  - mysqlParser_column_spec_return      pmysqlParser->column_spec(pmysqlParser)
 *  - mysqlParser_pseudo_column_return      pmysqlParser->pseudo_column(pmysqlParser)
 *  - mysqlParser_function_name_return      pmysqlParser->function_name(pmysqlParser)
 *  - mysqlParser_database_function_name_return      pmysqlParser->database_function_name(pmysqlParser)
 *  - mysqlParser_identifier_return      pmysqlParser->identifier(pmysqlParser)
 *  - mysqlParser_sql_identifier_return      pmysqlParser->sql_identifier(pmysqlParser)
 *  - mysqlParser_table_reference_list_return      pmysqlParser->table_reference_list(pmysqlParser)
 *  - mysqlParser_table_reference_return      pmysqlParser->table_reference(pmysqlParser)
 *  - mysqlParser_query_table_expression_return      pmysqlParser->query_table_expression(pmysqlParser)
 *  - mysqlParser_flashback_query_clause_return      pmysqlParser->flashback_query_clause(pmysqlParser)
 *  - mysqlParser_sample_clause_return      pmysqlParser->sample_clause(pmysqlParser)
 *  - mysqlParser_partition_extension_clause_return      pmysqlParser->partition_extension_clause(pmysqlParser)
 *  - mysqlParser_subquery_restricrion_clause_return      pmysqlParser->subquery_restricrion_clause(pmysqlParser)
 *  - mysqlParser_table_collection_clause_return      pmysqlParser->table_collection_clause(pmysqlParser)
 *  - mysqlParser_table_list_return      pmysqlParser->table_list(pmysqlParser)
 *  - mysqlParser_join_clause_return      pmysqlParser->join_clause(pmysqlParser)
 *  - mysqlParser_inner_cross_join_clause_return      pmysqlParser->inner_cross_join_clause(pmysqlParser)
 *  - mysqlParser_outer_join_clause_return      pmysqlParser->outer_join_clause(pmysqlParser)
 *  - mysqlParser_query_partition_clause_return      pmysqlParser->query_partition_clause(pmysqlParser)
 *  - mysqlParser_outer_join_type_return      pmysqlParser->outer_join_type(pmysqlParser)
 *  - mysqlParser_sample_percent_return      pmysqlParser->sample_percent(pmysqlParser)
 *  - mysqlParser_seed_value_return      pmysqlParser->seed_value(pmysqlParser)
 *  - mysqlParser_table_name_return      pmysqlParser->table_name(pmysqlParser)
 *  - mysqlParser_schema_name_return      pmysqlParser->schema_name(pmysqlParser)
 *  - mysqlParser_column_specs_return      pmysqlParser->column_specs(pmysqlParser)
 *  - mysqlParser_partition_return      pmysqlParser->partition(pmysqlParser)
 *  - mysqlParser_partition_key_value_return      pmysqlParser->partition_key_value(pmysqlParser)
 *  - mysqlParser_subpartition_key_value_return      pmysqlParser->subpartition_key_value(pmysqlParser)
 *  - mysqlParser_constraint_return      pmysqlParser->constraint(pmysqlParser)
 *  - mysqlParser_collection_expression_return      pmysqlParser->collection_expression(pmysqlParser)
 *  - mysqlParser_where_clause_return      pmysqlParser->where_clause(pmysqlParser)
 *  - mysqlParser_hierarchical_query_clause_return      pmysqlParser->hierarchical_query_clause(pmysqlParser)
 *  - mysqlParser_group_by_clause_return      pmysqlParser->group_by_clause(pmysqlParser)
 *  - mysqlParser_group_by_exprs_return      pmysqlParser->group_by_exprs(pmysqlParser)
 *  - mysqlParser_group_by_expr_return      pmysqlParser->group_by_expr(pmysqlParser)
 *  - mysqlParser_rollup_cube_clause_return      pmysqlParser->rollup_cube_clause(pmysqlParser)
 *  - mysqlParser_grouping_sets_clause_return      pmysqlParser->grouping_sets_clause(pmysqlParser)
 *  - mysqlParser_grouping_sets_exprs_return      pmysqlParser->grouping_sets_exprs(pmysqlParser)
 *  - mysqlParser_grouping_sets_expr_return      pmysqlParser->grouping_sets_expr(pmysqlParser)
 *  - mysqlParser_sql_condition_return      pmysqlParser->sql_condition(pmysqlParser)
 *  - mysqlParser_condition_or_return      pmysqlParser->condition_or(pmysqlParser)
 *  - mysqlParser_condition_and_return      pmysqlParser->condition_and(pmysqlParser)
 *  - mysqlParser_condition_not_return      pmysqlParser->condition_not(pmysqlParser)
 *  - mysqlParser_condition_expr_return      pmysqlParser->condition_expr(pmysqlParser)
 *  - mysqlParser_condition_exists_return      pmysqlParser->condition_exists(pmysqlParser)
 *  - mysqlParser_condition_is_return      pmysqlParser->condition_is(pmysqlParser)
 *  - mysqlParser_condition_comparison_return      pmysqlParser->condition_comparison(pmysqlParser)
 *  - mysqlParser_condition_group_comparison_return      pmysqlParser->condition_group_comparison(pmysqlParser)
 *  - mysqlParser_condition_in_return      pmysqlParser->condition_in(pmysqlParser)
 *  - mysqlParser_condition_is_a_set_return      pmysqlParser->condition_is_a_set(pmysqlParser)
 *  - mysqlParser_condition_is_any_return      pmysqlParser->condition_is_any(pmysqlParser)
 *  - mysqlParser_condition_is_empty_return      pmysqlParser->condition_is_empty(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_return      pmysqlParser->condition_is_of_type(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_names_return      pmysqlParser->condition_is_of_type_names(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_name_return      pmysqlParser->condition_is_of_type_name(pmysqlParser)
 *  - mysqlParser_condition_is_present_return      pmysqlParser->condition_is_present(pmysqlParser)
 *  - mysqlParser_condition_like_return      pmysqlParser->condition_like(pmysqlParser)
 *  - mysqlParser_condition_memeber_return      pmysqlParser->condition_memeber(pmysqlParser)
 *  - mysqlParser_condition_between_return      pmysqlParser->condition_between(pmysqlParser)
 *  - mysqlParser_condition_regexp_like_return      pmysqlParser->condition_regexp_like(pmysqlParser)
 *  - mysqlParser_condition_submultiset_return      pmysqlParser->condition_submultiset(pmysqlParser)
 *  - mysqlParser_condition_equals_path_return      pmysqlParser->condition_equals_path(pmysqlParser)
 *  - mysqlParser_condition_under_path_return      pmysqlParser->condition_under_path(pmysqlParser)
 *  - mysqlParser_levels_return      pmysqlParser->levels(pmysqlParser)
 *  - mysqlParser_correlation_integer_return      pmysqlParser->correlation_integer(pmysqlParser)
 *  - mysqlParser_path_string_return      pmysqlParser->path_string(pmysqlParser)
 *  - mysqlParser_type_name_return      pmysqlParser->type_name(pmysqlParser)
 *  - mysqlParser_integer_return      pmysqlParser->integer(pmysqlParser)
 *  - mysqlParser_column_name_return      pmysqlParser->column_name(pmysqlParser)
 *  - mysqlParser_nested_table_return      pmysqlParser->nested_table(pmysqlParser)
 *  - mysqlParser_nested_table_column_name_return      pmysqlParser->nested_table_column_name(pmysqlParser)
 *  - mysqlParser_sql_expressions_return      pmysqlParser->sql_expressions(pmysqlParser)
 *  - mysqlParser_grouping_expression_list_return      pmysqlParser->grouping_expression_list(pmysqlParser)
 *  - mysqlParser_expression_list_return      pmysqlParser->expression_list(pmysqlParser)
 *  - mysqlParser_cell_reference_return      pmysqlParser->cell_reference(pmysqlParser)
 *  - mysqlParser_condition_paren_return      pmysqlParser->condition_paren(pmysqlParser)
 *  - mysqlParser_model_clause_return      pmysqlParser->model_clause(pmysqlParser)
 *  - mysqlParser_cell_reference_options_return      pmysqlParser->cell_reference_options(pmysqlParser)
 *  - mysqlParser_return_rows_clause_return      pmysqlParser->return_rows_clause(pmysqlParser)
 *  - mysqlParser_reference_model_return      pmysqlParser->reference_model(pmysqlParser)
 *  - mysqlParser_reference_model_name_return      pmysqlParser->reference_model_name(pmysqlParser)
 *  - mysqlParser_main_model_return      pmysqlParser->main_model(pmysqlParser)
 *  - mysqlParser_main_model_name_return      pmysqlParser->main_model_name(pmysqlParser)
 *  - mysqlParser_model_column_clauses_return      pmysqlParser->model_column_clauses(pmysqlParser)
 *  - mysqlParser_model_columns_return      pmysqlParser->model_columns(pmysqlParser)
 *  - mysqlParser_model_column_return      pmysqlParser->model_column(pmysqlParser)
 *  - mysqlParser_model_rules_clause_return      pmysqlParser->model_rules_clause(pmysqlParser)
 *  - mysqlParser_model_rules_exprs_return      pmysqlParser->model_rules_exprs(pmysqlParser)
 *  - mysqlParser_model_rules_expr_return      pmysqlParser->model_rules_expr(pmysqlParser)
 *  - mysqlParser_cell_assignment_return      pmysqlParser->cell_assignment(pmysqlParser)
 *  - mysqlParser_cell_assignment_exprs_return      pmysqlParser->cell_assignment_exprs(pmysqlParser)
 *  - mysqlParser_cell_assignment_expr_return      pmysqlParser->cell_assignment_expr(pmysqlParser)
 *  - mysqlParser_measure_column_return      pmysqlParser->measure_column(pmysqlParser)
 *  - mysqlParser_single_column_for_loop_return      pmysqlParser->single_column_for_loop(pmysqlParser)
 *  - mysqlParser_pattern_return      pmysqlParser->pattern(pmysqlParser)
 *  - mysqlParser_literal_return      pmysqlParser->literal(pmysqlParser)
 *  - mysqlParser_literals_return      pmysqlParser->literals(pmysqlParser)
 *  - mysqlParser_multi_column_for_loop_return      pmysqlParser->multi_column_for_loop(pmysqlParser)
 *  - mysqlParser_bracket_literals_return      pmysqlParser->bracket_literals(pmysqlParser)
 *  - mysqlParser_bracket_literals_list_return      pmysqlParser->bracket_literals_list(pmysqlParser)
 *  - mysqlParser_union_clause_return      pmysqlParser->union_clause(pmysqlParser)
 *  - mysqlParser_order_by_clause_return      pmysqlParser->order_by_clause(pmysqlParser)
 *  - mysqlParser_order_by_clause_part_first_return      pmysqlParser->order_by_clause_part_first(pmysqlParser)
 *  - mysqlParser_order_by_clause_part_next_return      pmysqlParser->order_by_clause_part_next(pmysqlParser)
 *  - mysqlParser_limit_clause_return      pmysqlParser->limit_clause(pmysqlParser)
 *  - mysqlParser_analytic_function_name_return      pmysqlParser->analytic_function_name(pmysqlParser)
 *  - mysqlParser_analytic_function_call_return      pmysqlParser->analytic_function_call(pmysqlParser)
 *  - mysqlParser_analytic_function_return      pmysqlParser->analytic_function(pmysqlParser)
 *  - mysqlParser_analytic_clause_return      pmysqlParser->analytic_clause(pmysqlParser)
 *  - mysqlParser_windowing_clause_part_return      pmysqlParser->windowing_clause_part(pmysqlParser)
 *  - mysqlParser_windowing_clause_return      pmysqlParser->windowing_clause(pmysqlParser)
 *  - mysqlParser_for_update_clause_return      pmysqlParser->for_update_clause(pmysqlParser)
 *  - mysqlParser_for_update_clause_part_first_return      pmysqlParser->for_update_clause_part_first(pmysqlParser)
 *  - mysqlParser_for_update_clause_part_next_return      pmysqlParser->for_update_clause_part_next(pmysqlParser)
 *  - mysqlParser_lock_in_share_mode_return      pmysqlParser->lock_in_share_mode(pmysqlParser)
 *  - mysqlParser_procedure_clause_return      pmysqlParser->procedure_clause(pmysqlParser)
 *  - mysqlParser_into_file_clause_return      pmysqlParser->into_file_clause(pmysqlParser)
 *  - mysqlParser_pivot_clause_return      pmysqlParser->pivot_clause(pmysqlParser)
 *  - mysqlParser_pivot_for_clause_return      pmysqlParser->pivot_for_clause(pmysqlParser)
 *  - mysqlParser_pivot_in_clause_return      pmysqlParser->pivot_in_clause(pmysqlParser)
 *  - mysqlParser_unpivot_clause_return      pmysqlParser->unpivot_clause(pmysqlParser)
 *  - mysqlParser_unpivot_in_clause_return      pmysqlParser->unpivot_in_clause(pmysqlParser)
 *  - mysqlParser_constant_return      pmysqlParser->constant(pmysqlParser)
 *  - mysqlParser_reserved_word_return      pmysqlParser->reserved_word(pmysqlParser)
 *  - mysqlParser_keyword_return      pmysqlParser->keyword(pmysqlParser)
 *  - mysqlParser_quoted_string_return      pmysqlParser->quoted_string(pmysqlParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_mysqlParser_H
#define _mysqlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct mysqlParser_Ctx_struct mysqlParser, * pmysqlParser;



#include "pgify.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct mysqlParser_start_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_start_rule_return;

typedef struct mysqlParser_unlock_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unlock_tables_statement_return;

typedef struct mysqlParser_lock_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_tables_statement_return;

typedef struct mysqlParser_lock_tables_tablename_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_tables_tablename_return;

typedef struct mysqlParser_table_lock_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_lock_type_return;

typedef struct mysqlParser_use_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_use_database_statement_return;

typedef struct mysqlParser_show_databases_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_show_databases_statement_return;

typedef struct mysqlParser_show_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_show_tables_statement_return;

typedef struct mysqlParser_show_tables_from_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_show_tables_from_return;

typedef struct mysqlParser_show_tables_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_show_tables_like_return;

typedef struct mysqlParser_show_tables_where_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_show_tables_where_return;

typedef struct mysqlParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_database_statement_return;

typedef struct mysqlParser_create_database_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_database_options_return;

typedef struct mysqlParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_table_statement_return;

typedef struct mysqlParser_table_create_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_create_like_return;

typedef struct mysqlParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_definition_return;

typedef struct mysqlParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_return;

typedef struct mysqlParser_column_definition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_options_return;

typedef struct mysqlParser_column_definition_collate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_collate_return;

typedef struct mysqlParser_column_definition_charset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_charset_return;

typedef struct mysqlParser_column_definition_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_default_return;

typedef struct mysqlParser_column_definition_onupdate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_onupdate_return;

typedef struct mysqlParser_column_constraint_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_constraint_definition_return;

typedef struct mysqlParser_constraint_primary_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_primary_key_return;

typedef struct mysqlParser_constraint_unique_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_unique_key_return;

typedef struct mysqlParser_constraint_unique_key_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_unique_key_name_return;

typedef struct mysqlParser_constraint_index_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_index_key_return;

typedef struct mysqlParser_constraint_index_colname_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_index_colname_return;

typedef struct mysqlParser_constraint_fulltext_index_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_fulltext_index_key_return;

typedef struct mysqlParser_constraint_table_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_table_key_return;

typedef struct mysqlParser_constraint_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_reference_definition_return;

typedef struct mysqlParser_constraint_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_reference_option_return;

typedef struct mysqlParser_constraint_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_name_return;

typedef struct mysqlParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_index_type_return;

typedef struct mysqlParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_index_option_return;

typedef struct mysqlParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_options_return;

typedef struct mysqlParser_drop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_drop_statement_return;

typedef struct mysqlParser_delete_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_delete_statement_return;

typedef struct mysqlParser_merge_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_statement_return;

typedef struct mysqlParser_merge_update_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_update_clause_return;

typedef struct mysqlParser_merge_insert_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_insert_clause_return;

typedef struct mysqlParser_insert_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_insert_statement_return;

typedef struct mysqlParser_single_table_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_single_table_insert_return;

typedef struct mysqlParser_insert_into_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_insert_into_clause_return;

typedef struct mysqlParser_values_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_values_clause_return;

typedef struct mysqlParser_returning_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_returning_clause_return;

typedef struct mysqlParser_multi_table_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_multi_table_insert_return;

typedef struct mysqlParser_conditional_insert_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_conditional_insert_clause_return;

typedef struct mysqlParser_dml_table_expression_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_dml_table_expression_clause_return;

typedef struct mysqlParser_error_logging_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_error_logging_clause_return;

typedef struct mysqlParser_data_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_data_item_return;

typedef struct mysqlParser_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_update_statement_return;

typedef struct mysqlParser_update_set_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_update_set_clause_return;

typedef struct mysqlParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_statement_return;

typedef struct mysqlParser_subquery_factoring_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_return;

typedef struct mysqlParser_subquery_factoring_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_part_first_return;

typedef struct mysqlParser_subquery_factoring_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_part_next_return;

typedef struct mysqlParser_search_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_search_clause_return;

typedef struct mysqlParser_cycle_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cycle_clause_return;

typedef struct mysqlParser_select_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_hint_return;

typedef struct mysqlParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_list_return;

typedef struct mysqlParser_displayed_column_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_part_first_return;

typedef struct mysqlParser_displayed_column_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_part_next_return;

typedef struct mysqlParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_return;

typedef struct mysqlParser_mysql_server_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_mysql_server_variable_return;

typedef struct mysqlParser_sql_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_expression_return;

typedef struct mysqlParser_expr_add_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_add_return;

typedef struct mysqlParser_expr_mul_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_mul_return;

typedef struct mysqlParser_expr_sign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_sign_return;

typedef struct mysqlParser_expr_pow_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_pow_return;

typedef struct mysqlParser_expr_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_expr_return;

typedef struct mysqlParser_expr_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_paren_return;

typedef struct mysqlParser_nested_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_expression_return;

typedef struct mysqlParser_function_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_function_expression_return;

typedef struct mysqlParser_call_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_call_parameters_return;

typedef struct mysqlParser_call_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_call_parameter_return;

typedef struct mysqlParser_parameter_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_parameter_name_return;

typedef struct mysqlParser_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_case_expression_return;

typedef struct mysqlParser_simple_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_simple_case_expression_return;

typedef struct mysqlParser_searched_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_searched_case_expression_return;

typedef struct mysqlParser_else_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_else_case_expression_return;

typedef struct mysqlParser_simple_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_simple_expression_return;

typedef struct mysqlParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_return;

typedef struct mysqlParser_datetime_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_datetime_expression_return;

typedef struct mysqlParser_interval_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_interval_expression_return;

typedef struct mysqlParser_special_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_special_expression_return;

typedef struct mysqlParser_cluster_set_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cluster_set_clause_return;

typedef struct mysqlParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cast_expression_return;

typedef struct mysqlParser_datatype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_datatype_return;

typedef struct mysqlParser_r_enum_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_enum_return;

typedef struct mysqlParser_r_int_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_int_return;

typedef struct mysqlParser_r_tinyint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_tinyint_return;

typedef struct mysqlParser_r_smallint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_smallint_return;

typedef struct mysqlParser_bigint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bigint_return;

typedef struct mysqlParser_r_unsigned_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_unsigned_return;

typedef struct mysqlParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_boolean_literal_return;

typedef struct mysqlParser_t_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_t_alias_return;

typedef struct mysqlParser_c_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_c_alias_return;

typedef struct mysqlParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_alias_return;

typedef struct mysqlParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_spec_return;

typedef struct mysqlParser_pseudo_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pseudo_column_return;

typedef struct mysqlParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_function_name_return;

typedef struct mysqlParser_database_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_database_function_name_return;

typedef struct mysqlParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_identifier_return;

typedef struct mysqlParser_sql_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_identifier_return;

typedef struct mysqlParser_table_reference_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_reference_list_return;

typedef struct mysqlParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_reference_return;

typedef struct mysqlParser_query_table_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_query_table_expression_return;

typedef struct mysqlParser_flashback_query_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_flashback_query_clause_return;

typedef struct mysqlParser_sample_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sample_clause_return;

typedef struct mysqlParser_partition_extension_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_extension_clause_return;

typedef struct mysqlParser_subquery_restricrion_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_restricrion_clause_return;

typedef struct mysqlParser_table_collection_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_collection_clause_return;

typedef struct mysqlParser_table_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_list_return;

typedef struct mysqlParser_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_join_clause_return;

typedef struct mysqlParser_inner_cross_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_inner_cross_join_clause_return;

typedef struct mysqlParser_outer_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_outer_join_clause_return;

typedef struct mysqlParser_query_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_query_partition_clause_return;

typedef struct mysqlParser_outer_join_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_outer_join_type_return;

typedef struct mysqlParser_sample_percent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sample_percent_return;

typedef struct mysqlParser_seed_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_seed_value_return;

typedef struct mysqlParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_name_return;

typedef struct mysqlParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_schema_name_return;

typedef struct mysqlParser_column_specs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_specs_return;

typedef struct mysqlParser_partition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_return;

typedef struct mysqlParser_partition_key_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_key_value_return;

typedef struct mysqlParser_subpartition_key_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subpartition_key_value_return;

typedef struct mysqlParser_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_return;

typedef struct mysqlParser_collection_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_collection_expression_return;

typedef struct mysqlParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_where_clause_return;

typedef struct mysqlParser_hierarchical_query_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_hierarchical_query_clause_return;

typedef struct mysqlParser_group_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_clause_return;

typedef struct mysqlParser_group_by_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_exprs_return;

typedef struct mysqlParser_group_by_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_expr_return;

typedef struct mysqlParser_rollup_cube_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_rollup_cube_clause_return;

typedef struct mysqlParser_grouping_sets_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_clause_return;

typedef struct mysqlParser_grouping_sets_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_exprs_return;

typedef struct mysqlParser_grouping_sets_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_expr_return;

typedef struct mysqlParser_sql_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_condition_return;

typedef struct mysqlParser_condition_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_or_return;

typedef struct mysqlParser_condition_and_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_and_return;

typedef struct mysqlParser_condition_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_not_return;

typedef struct mysqlParser_condition_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_expr_return;

typedef struct mysqlParser_condition_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_exists_return;

typedef struct mysqlParser_condition_is_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_return;

typedef struct mysqlParser_condition_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_comparison_return;

typedef struct mysqlParser_condition_group_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_group_comparison_return;

typedef struct mysqlParser_condition_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_in_return;

typedef struct mysqlParser_condition_is_a_set_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_a_set_return;

typedef struct mysqlParser_condition_is_any_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_any_return;

typedef struct mysqlParser_condition_is_empty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_empty_return;

typedef struct mysqlParser_condition_is_of_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_return;

typedef struct mysqlParser_condition_is_of_type_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_names_return;

typedef struct mysqlParser_condition_is_of_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_name_return;

typedef struct mysqlParser_condition_is_present_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_present_return;

typedef struct mysqlParser_condition_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_like_return;

typedef struct mysqlParser_condition_memeber_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_memeber_return;

typedef struct mysqlParser_condition_between_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_between_return;

typedef struct mysqlParser_condition_regexp_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_regexp_like_return;

typedef struct mysqlParser_condition_submultiset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_submultiset_return;

typedef struct mysqlParser_condition_equals_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_equals_path_return;

typedef struct mysqlParser_condition_under_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_under_path_return;

typedef struct mysqlParser_levels_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_levels_return;

typedef struct mysqlParser_correlation_integer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_correlation_integer_return;

typedef struct mysqlParser_path_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_path_string_return;

typedef struct mysqlParser_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_type_name_return;

typedef struct mysqlParser_integer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_integer_return;

typedef struct mysqlParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_name_return;

typedef struct mysqlParser_nested_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_table_return;

typedef struct mysqlParser_nested_table_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_table_column_name_return;

typedef struct mysqlParser_sql_expressions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_expressions_return;

typedef struct mysqlParser_grouping_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_expression_list_return;

typedef struct mysqlParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expression_list_return;

typedef struct mysqlParser_cell_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_reference_return;

typedef struct mysqlParser_condition_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_paren_return;

typedef struct mysqlParser_model_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_clause_return;

typedef struct mysqlParser_cell_reference_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_reference_options_return;

typedef struct mysqlParser_return_rows_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_return_rows_clause_return;

typedef struct mysqlParser_reference_model_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reference_model_return;

typedef struct mysqlParser_reference_model_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reference_model_name_return;

typedef struct mysqlParser_main_model_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_main_model_return;

typedef struct mysqlParser_main_model_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_main_model_name_return;

typedef struct mysqlParser_model_column_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_column_clauses_return;

typedef struct mysqlParser_model_columns_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_columns_return;

typedef struct mysqlParser_model_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_column_return;

typedef struct mysqlParser_model_rules_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_clause_return;

typedef struct mysqlParser_model_rules_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_exprs_return;

typedef struct mysqlParser_model_rules_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_expr_return;

typedef struct mysqlParser_cell_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_return;

typedef struct mysqlParser_cell_assignment_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_exprs_return;

typedef struct mysqlParser_cell_assignment_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_expr_return;

typedef struct mysqlParser_measure_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_measure_column_return;

typedef struct mysqlParser_single_column_for_loop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_single_column_for_loop_return;

typedef struct mysqlParser_pattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pattern_return;

typedef struct mysqlParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_literal_return;

typedef struct mysqlParser_literals_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_literals_return;

typedef struct mysqlParser_multi_column_for_loop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_multi_column_for_loop_return;

typedef struct mysqlParser_bracket_literals_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bracket_literals_return;

typedef struct mysqlParser_bracket_literals_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bracket_literals_list_return;

typedef struct mysqlParser_union_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_union_clause_return;

typedef struct mysqlParser_order_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_return;

typedef struct mysqlParser_order_by_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_part_first_return;

typedef struct mysqlParser_order_by_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_part_next_return;

typedef struct mysqlParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_limit_clause_return;

typedef struct mysqlParser_analytic_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_name_return;

typedef struct mysqlParser_analytic_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_call_return;

typedef struct mysqlParser_analytic_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_return;

typedef struct mysqlParser_analytic_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_clause_return;

typedef struct mysqlParser_windowing_clause_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_windowing_clause_part_return;

typedef struct mysqlParser_windowing_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_windowing_clause_return;

typedef struct mysqlParser_for_update_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_return;

typedef struct mysqlParser_for_update_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_part_first_return;

typedef struct mysqlParser_for_update_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_part_next_return;

typedef struct mysqlParser_lock_in_share_mode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_in_share_mode_return;

typedef struct mysqlParser_procedure_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_procedure_clause_return;

typedef struct mysqlParser_into_file_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_into_file_clause_return;

typedef struct mysqlParser_pivot_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_clause_return;

typedef struct mysqlParser_pivot_for_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_for_clause_return;

typedef struct mysqlParser_pivot_in_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_in_clause_return;

typedef struct mysqlParser_unpivot_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unpivot_clause_return;

typedef struct mysqlParser_unpivot_in_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unpivot_in_clause_return;

typedef struct mysqlParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constant_return;

typedef struct mysqlParser_reserved_word_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reserved_word_return;

typedef struct mysqlParser_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_keyword_return;

typedef struct mysqlParser_quoted_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_quoted_string_return;



/** Context tracking structure for mysqlParser
 */
struct mysqlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     mysqlParser_start_rule_return (*start_rule)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unlock_tables_statement_return (*unlock_tables_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_tables_statement_return (*lock_tables_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_tables_tablename_return (*lock_tables_tablename)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_lock_type_return (*table_lock_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_use_database_statement_return (*use_database_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_show_databases_statement_return (*show_databases_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_show_tables_statement_return (*show_tables_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_show_tables_from_return (*show_tables_from)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_show_tables_like_return (*show_tables_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_show_tables_where_return (*show_tables_where)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_database_statement_return (*create_database_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_database_options_return (*create_database_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_table_statement_return (*create_table_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_create_like_return (*table_create_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_definition_return (*create_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_return (*column_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_options_return (*column_definition_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_collate_return (*column_definition_collate)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_charset_return (*column_definition_charset)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_default_return (*column_definition_default)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_onupdate_return (*column_definition_onupdate)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_constraint_definition_return (*column_constraint_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_primary_key_return (*constraint_primary_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_unique_key_return (*constraint_unique_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_unique_key_name_return (*constraint_unique_key_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_index_key_return (*constraint_index_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_index_colname_return (*constraint_index_colname)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_fulltext_index_key_return (*constraint_fulltext_index_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_table_key_return (*constraint_table_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_reference_definition_return (*constraint_reference_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_reference_option_return (*constraint_reference_option)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_name_return (*constraint_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_index_type_return (*index_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_index_option_return (*index_option)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_options_return (*table_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_drop_statement_return (*drop_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_delete_statement_return (*delete_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_statement_return (*merge_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_update_clause_return (*merge_update_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_insert_clause_return (*merge_insert_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_insert_statement_return (*insert_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_single_table_insert_return (*single_table_insert)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_insert_into_clause_return (*insert_into_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_values_clause_return (*values_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_returning_clause_return (*returning_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_multi_table_insert_return (*multi_table_insert)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_conditional_insert_clause_return (*conditional_insert_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_dml_table_expression_clause_return (*dml_table_expression_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_error_logging_clause_return (*error_logging_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_data_item_return (*data_item)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_update_statement_return (*update_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_update_set_clause_return (*update_set_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_statement_return (*select_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_return (*subquery_factoring_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_part_first_return (*subquery_factoring_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_part_next_return (*subquery_factoring_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_search_clause_return (*search_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cycle_clause_return (*cycle_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_hint_return (*select_hint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_list_return (*select_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_part_first_return (*displayed_column_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_part_next_return (*displayed_column_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_return (*displayed_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_mysql_server_variable_return (*mysql_server_variable)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_expression_return (*sql_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_add_return (*expr_add)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_mul_return (*expr_mul)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_sign_return (*expr_sign)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_pow_return (*expr_pow)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_expr_return (*expr_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_paren_return (*expr_paren)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_expression_return (*nested_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_function_expression_return (*function_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_call_parameters_return (*call_parameters)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_call_parameter_return (*call_parameter)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_parameter_name_return (*parameter_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_case_expression_return (*case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_simple_case_expression_return (*simple_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_searched_case_expression_return (*searched_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_else_case_expression_return (*else_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_simple_expression_return (*simple_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_return (*subquery)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_datetime_expression_return (*datetime_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_interval_expression_return (*interval_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_special_expression_return (*special_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cluster_set_clause_return (*cluster_set_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cast_expression_return (*cast_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_datatype_return (*datatype)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_enum_return (*r_enum)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_int_return (*r_int)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_tinyint_return (*r_tinyint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_smallint_return (*r_smallint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bigint_return (*bigint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_unsigned_return (*r_unsigned)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_boolean_literal_return (*boolean_literal)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_t_alias_return (*t_alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_c_alias_return (*c_alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_alias_return (*alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_spec_return (*column_spec)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pseudo_column_return (*pseudo_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_function_name_return (*function_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_database_function_name_return (*database_function_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_identifier_return (*identifier)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_identifier_return (*sql_identifier)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_reference_list_return (*table_reference_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_reference_return (*table_reference)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_query_table_expression_return (*query_table_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_flashback_query_clause_return (*flashback_query_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sample_clause_return (*sample_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_extension_clause_return (*partition_extension_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_restricrion_clause_return (*subquery_restricrion_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_collection_clause_return (*table_collection_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_list_return (*table_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_join_clause_return (*join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_inner_cross_join_clause_return (*inner_cross_join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_outer_join_clause_return (*outer_join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_query_partition_clause_return (*query_partition_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_outer_join_type_return (*outer_join_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sample_percent_return (*sample_percent)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_seed_value_return (*seed_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_name_return (*table_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_schema_name_return (*schema_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_specs_return (*column_specs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_return (*partition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_key_value_return (*partition_key_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subpartition_key_value_return (*subpartition_key_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_return (*constraint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_collection_expression_return (*collection_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_where_clause_return (*where_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_hierarchical_query_clause_return (*hierarchical_query_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_clause_return (*group_by_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_exprs_return (*group_by_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_expr_return (*group_by_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_rollup_cube_clause_return (*rollup_cube_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_clause_return (*grouping_sets_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_exprs_return (*grouping_sets_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_expr_return (*grouping_sets_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_condition_return (*sql_condition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_or_return (*condition_or)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_and_return (*condition_and)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_not_return (*condition_not)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_expr_return (*condition_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_exists_return (*condition_exists)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_return (*condition_is)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_comparison_return (*condition_comparison)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_group_comparison_return (*condition_group_comparison)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_in_return (*condition_in)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_a_set_return (*condition_is_a_set)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_any_return (*condition_is_any)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_empty_return (*condition_is_empty)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_return (*condition_is_of_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_names_return (*condition_is_of_type_names)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_name_return (*condition_is_of_type_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_present_return (*condition_is_present)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_like_return (*condition_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_memeber_return (*condition_memeber)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_between_return (*condition_between)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_regexp_like_return (*condition_regexp_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_submultiset_return (*condition_submultiset)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_equals_path_return (*condition_equals_path)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_under_path_return (*condition_under_path)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_levels_return (*levels)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_correlation_integer_return (*correlation_integer)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_path_string_return (*path_string)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_type_name_return (*type_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_integer_return (*integer)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_name_return (*column_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_table_return (*nested_table)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_table_column_name_return (*nested_table_column_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_expressions_return (*sql_expressions)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_expression_list_return (*grouping_expression_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expression_list_return (*expression_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_reference_return (*cell_reference)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_paren_return (*condition_paren)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_clause_return (*model_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_reference_options_return (*cell_reference_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_return_rows_clause_return (*return_rows_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reference_model_return (*reference_model)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reference_model_name_return (*reference_model_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_main_model_return (*main_model)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_main_model_name_return (*main_model_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_column_clauses_return (*model_column_clauses)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_columns_return (*model_columns)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_column_return (*model_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_clause_return (*model_rules_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_exprs_return (*model_rules_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_expr_return (*model_rules_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_return (*cell_assignment)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_exprs_return (*cell_assignment_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_expr_return (*cell_assignment_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_measure_column_return (*measure_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_single_column_for_loop_return (*single_column_for_loop)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pattern_return (*pattern)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_literal_return (*literal)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_literals_return (*literals)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_multi_column_for_loop_return (*multi_column_for_loop)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bracket_literals_return (*bracket_literals)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bracket_literals_list_return (*bracket_literals_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_union_clause_return (*union_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_return (*order_by_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_part_first_return (*order_by_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_part_next_return (*order_by_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_limit_clause_return (*limit_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_name_return (*analytic_function_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_call_return (*analytic_function_call)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_return (*analytic_function)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_clause_return (*analytic_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_windowing_clause_part_return (*windowing_clause_part)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_windowing_clause_return (*windowing_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_return (*for_update_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_part_first_return (*for_update_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_part_next_return (*for_update_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_in_share_mode_return (*lock_in_share_mode)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_procedure_clause_return (*procedure_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_into_file_clause_return (*into_file_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_clause_return (*pivot_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_for_clause_return (*pivot_for_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_in_clause_return (*pivot_in_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unpivot_clause_return (*unpivot_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unpivot_in_clause_return (*unpivot_in_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constant_return (*constant)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reserved_word_return (*reserved_word)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_keyword_return (*keyword)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_quoted_string_return (*quoted_string)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred16_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred18_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred31_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred34_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred45_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred46_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred75_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred82_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred147_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred154_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred163_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred175_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred210_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred212_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred214_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred224_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred232_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred245_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred246_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred247_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred248_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred249_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred250_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred251_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred268_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred269_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred270_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred271_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred272_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred273_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred274_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred275_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred284_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred286_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred291_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred292_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred295_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred296_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred297_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred298_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred299_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred300_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred301_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred302_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred304_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred305_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred306_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred311_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred316_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred317_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred318_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred321_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred322_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred324_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred325_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred326_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred327_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred328_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred329_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred330_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred340_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred447_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred472_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred473_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred474_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred475_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred479_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred490_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred494_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred499_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred512_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred513_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred522_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred531_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred532_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred533_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred534_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred537_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred539_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred540_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred543_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred548_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred549_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred550_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred551_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred552_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred553_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred554_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred555_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred556_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred557_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred558_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred559_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred560_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred561_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred562_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred563_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred568_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred569_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred575_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred576_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred581_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred592_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred616_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred617_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred619_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred620_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred621_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred622_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred651_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred652_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred730_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred740_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred742_mysql)	(struct mysqlParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct mysqlParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pmysqlParser mysqlParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pmysqlParser mysqlParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define K_BINARY_FLOAT      155
#define K_FALSE      207
#define K_LAYER      457
#define K_MONTH      150
#define K_REFERENCING      499
#define K_REGEXP_LIKE      275
#define K_TRACING      524
#define K_PARTITION      235
#define K_CONNECT      247
#define K_ZONE      144
#define K_CREATE      39
#define K_RESOURCE      386
#define K_EXISTS      51
#define K_ARRAYLEN      364
#define K_ROW_NUMBER      333
#define K_CASCADE      76
#define K_GO      449
#define K_COLUMN      367
#define RPAREN      53
#define K_USE      33
#define K_ROLE      503
#define K_STDDEV_SAMP      336
#define K_ADD      362
#define K_LEFT      243
#define K_ONLINE      381
#define K_LOW_PRIORITY      31
#define K_VIEW      398
#define K_NOCOMPRESS      378
#define K_CLOB      193
#define GEQ      261
#define EQ      89
#define K_DATETIME      167
#define K_INCLUDE      360
#define K_RAW      164
#define K_PIVOT      356
#define K_NATURAL      157
#define K_RESTRICT      75
#define DIVIDE      132
#define K_ORDER      294
#define RBRACK      298
#define BACKQUOTED_STRING      128
#define K_UNDER_PATH      278
#define K_MAXLOGFILES      465
#define K_SESSIONTIMEZONE      146
#define K_OVER      342
#define K_SHARED      511
#define K_NOMAXVALUE      477
#define K_FREELISTS      447
#define K_NUMBER      159
#define K_IDENTIFIED      372
#define K_TEXT      174
#define K_ALLOCATE      402
#define K_MAXEXTENTS      375
#define K_FREELIST      446
#define K_DENSE_RANK      311
#define K_LONG      163
#define PERCENTAGE      543
#define K_NULLS      115
#define K_CLOSE      416
#define K_INDEX      67
#define QS_ANGLE      533
#define K_NOCYCLE      248
#define T_WHERE      22
#define K_UNTIL      296
#define SL_COMMENT      551
#define K_SEQUENCE      510
#define K_CONSTRAINT      77
#define K_TIMESTAMP      169
#define K_NOWAIT      349
#define K_NOORDER      480
#define K_SQL      141
#define K_DESC      70
#define K_MEDIUMTEXT      176
#define K_MODULE      471
#define K_LEVEL      210
#define K_FULL      35
#define K_RESTRICTED      501
#define LBRACK      297
#define K_PERCENT_RANK      319
#define K_INITIAL      374
#define K_LOG      99
#define POINT      541
#define K_PRESENT      269
#define K_RANK      322
#define K_COLLATE      46
#define K_POSITIVE      158
#define K_VERSIONS_STARTTIME      213
#define K_TINYINT      202
#define K_DOUBLE      172
#define K_DECREMENT      300
#define K_LIMIT      102
#define K_PRECISION      173
#define K_REGR_COUNT      326
#define K_BOOLEAN      165
#define K_EACH      431
#define K_BLOB      192
#define K_SEQUENTIAL      293
#define K_BACKUP      407
#define K_TEMPORARY      47
#define K_TINYBLOB      189
#define K_INTO      85
#define K_CURRENT_TIMESTAMP      531
#define K_NOSORT      483
#define K_SECTION      508
#define K_REVOKE      387
#define K_VARCHAR      181
#define PLUS      129
#define K_COMMIT      418
#define K_SHOW      34
#define K_NATIONAL      186
#define K_UNLIMITED      103
#define K_NEXT      474
#define K_THEN      88
#define K_DEPTH      112
#define K_DECIMAL      161
#define K_REFERENCE      285
#define K_UNSIGNED      205
#define K_WITH      110
#define K_IS      256
#define K_CLUSTER_SET      151
#define K_IN      37
#define MINUS      130
#define K_SUBPARTITION      237
#define T_SHOW_TABLES      20
#define SEMI      24
#define T_CREATE_TABLE_ENUM      10
#define NOT_EQ      259
#define K_IF      49
#define VERTBAR      547
#define COLON      540
#define K_TINYTEXT      175
#define K_CURRENT      346
#define K_PRECEDING      344
#define K_MEDIUMINT      201
#define K_READ      29
#define K_CONTINUE      422
#define K_CHECKPOINT      415
#define T_CREATE_TABLE      6
#define K_MODIFY      376
#define K_PRIVATE      495
#define K_NCHAR      183
#define QS_OTHER_CH      539
#define ARROW      138
#define K_MEDIUMBLOB      190
#define K_MAXVALUE      230
#define K_NTILE      318
#define K_REAL      171
#define K_LIKE4      272
#define K_LIKE2      271
#define K_PRIVILEGES      383
#define T__569      569
#define K_INT      199
#define T__568      568
#define T__567      567
#define T__566      566
#define K_AUDIT      365
#define T__565      565
#define K_CONSTRAINTS      420
#define T__574      574
#define T__575      575
#define K_REJECT      101
#define T__572      572
#define K_SEARCH      111
#define T__573      573
#define T__570      570
#define K_MIVALUE      228
#define DOUBLEDOT      542
#define T__571      571
#define T_SHOW_TABLES_FROM      19
#define K_LIKEC      270
#define K_PUBLIC      384
#define K_LINK      458
#define K_PRIMARY      57
#define K_REFERENCES      73
#define T_SERVER_VARIABLE      15
#define QUOTE      538
#define K_LOCK      26
#define K_RECOVER      498
#define T__577      577
#define T__576      576
#define T__579      579
#define T__578      578
#define K_KEY      58
#define T__583      583
#define K_CHARACTER      42
#define T__584      584
#define T__585      585
#define T__586      586
#define K_UPSERT      291
#define T__580      580
#define T__581      581
#define T__582      582
#define K_TRUNCATE      527
#define K_UPDATED      286
#define K_ALL      95
#define K_QUOTA      497
#define K_OUTER      245
#define K_A      266
#define K_FIRST_VALUE      312
#define K_END      140
#define K_GROUPING      253
#define K_COUNT      309
#define K_VAR_SAMP      339
#define K_NORESETLOGS      481
#define T__588      588
#define T__587      587
#define K_GOTO      450
#define K_UPDATE      66
#define K_SUBMULTISET      276
#define K_PCTFREE      382
#define DOUBLEVERTBAR      131
#define K_INDICATOR      453
#define K_ONLY      83
#define K_VERSIONS_ENDSCN      216
#define K_NOMINVALUE      478
#define K_PROFILE      496
#define K_STRAIGHT_JOIN      120
#define K_ENGINE      79
#define T_SELECT_STATEMENT      17
#define BACKTICK      549
#define K_RIGHT      244
#define K_EXTERNALLY      440
#define K_CONTROLFILE      423
#define T_SHOW_TABLES_LIKE      18
#define K_CONTENTS      421
#define K_WORK      529
#define K_ANY      264
#define K_STORAGE      64
#define K_MLSLABEL      187
#define K_AND      229
#define K_SHARE      353
#define K_RESETLOGS      500
#define K_GROUP      250
#define K_UID      395
#define K_SQLBUF      391
#define K_LIKE      38
#define K_PLI      494
#define K_STDDEV      334
#define K_SESSION      389
#define K_XMLDATA      223
#define K_NCLOB      194
#define K_INTERSECT      301
#define K_LOGFILE      460
#define K_VERSIONS_ENDTIME      215
#define K_DELETE      74
#define K_BY      114
#define K_PRIOR      133
#define ID      45
#define K_OFFLINE      380
#define K_MODEL      279
#define K_CORR      306
#define K_LEAD      315
#define K_SET      43
#define K_DATABASE      40
#define K_PCTINCREASE      491
#define COMMA      90
#define K_VARIANCE      340
#define K_BODY      411
#define K_OBJECT_ID      220
#define K_SETS      254
#define K_INCREMENT      299
#define K_WHENEVER      399
#define QUOTED_STRING      60
#define K_CUME_DIST      310
#define K_EXCEPT      434
#define K_SQLCODE      514
#define K_CYCLE      117
#define K_RETURNING      94
#define K_SQLSTATE      516
#define K_OFF      484
#define K_NORMAL      482
#define K_CHARSET      44
#define K_SQL_BIG_RESULT      122
#define K_THE      530
#define K_SAVEPOINT      506
#define K_PERCENTILE_CONT      320
#define K_VERSIONS_STARSCN      214
#define K_REGR_AVGY      329
#define K_EXCLUDE      359
#define K_REGR_AVGX      328
#define K_COVAR_POP      307
#define K_TABLESPACE      522
#define K_MIN      317
#define K_KEEP      281
#define K_HAVING      109
#define K_COMMENT      59
#define K_FORCE      443
#define K_DEFAULT      41
#define K_PACKAGE      489
#define K_SCN      227
#define K_BEFORE      409
#define K_NOTFOUND      379
#define K_SQL_SMALL_RESULT      121
#define K_DISMOUNT      429
#define K_COBOL      417
#define K_SIZE      390
#define K_OPTION      239
#define T_CREATE_TABLE_INDEX      7
#define ASSIGN      546
#define K_IGNORE      280
#define K_ROWNUM      209
#define T_USE_DATABASE      4
#define K_ROW      347
#define K_SEGMENT      509
#define K_SQL_NO_CACHE      125
#define K_AS      28
#define K_AT      142
#define QS_OTHER      537
#define STUPID_MYSQL_TIMESTAMP      137
#define K_RATIO_TO_REPORT      323
#define LEQ      263
#define K_INFINITE      258
#define K_MAXLOGHISTORY      466
#define K_EXCLUSIVE      369
#define K_OFFSET      304
#define K_VARCHAR2      182
#define K_BLOCK      233
#define K_PARALLEL      490
#define K_FUNCTION      448
#define K_RULES      290
#define K_DEC      162
#define K_MULTISET      153
#define EOF      -1
#define K_CONNECT_BY_ISLEAF      211
#define K_SORT      513
#define K_OBJECT_VALUE      221
#define K_DATE      166
#define K_DISTINCT      106
#define K_MINUS      302
#define K_DISTINCTROW      107
#define K_LAG      313
#define K_ANALYZE      403
#define K_ERRORS      100
#define K_TYPE      268
#define K_AFTER      401
#define K_FLUSH      442
#define K_ROLLUP      251
#define NUMBER      68
#define T_CREATE_TABLE_OPTIONS      8
#define AT_SIGN      98
#define K_EXECUTE      437
#define K_FIXED      62
#define K_VARYING      179
#define K_TRANSACTION      525
#define K_PLAN      493
#define K_SQLERROR      515
#define K_NEW      473
#define K_RETURN      93
#define K_MINEXTENTS      469
#define K_SMALLINT      203
#define WS      550
#define K_LOCAL      30
#define K_CONNECT_BY_ISCYCLE      212
#define K_NOT      50
#define T_CREATE_TABLE_FULLTEXT_INDEX      11
#define K_DBA      426
#define K_BINARY_INTEGER      154
#define K_VERSIONS      225
#define K_ESCAPE      273
#define K_DAY      147
#define K_LONGBLOB      191
#define K_ROWS      287
#define K_LAST      116
#define K_CHAR      178
#define K_JOIN      241
#define K_STATEMENT_ID      517
#define K_FOLLOWING      345
#define K_FOUND      445
#define STUPID_MYSQL_DATE      136
#define K_OLD      485
#define K_UNIQUE      56
#define K_FOR      236
#define K_UNION      108
#define LLABEL      544
#define K_EQUALS_PATH      277
#define K_MATCHED      87
#define ASTERISK      127
#define LPAREN      52
#define K_ENUM      198
#define K_THREAD      523
#define RLABEL      545
#define K_GROUPS      451
#define K_INSTANCE      455
#define K_HIGH_PRIORITY      119
#define K_START      249
#define K_CUBE      252
#define K_SYSDATE      208
#define K_ROWLABEL      388
#define K_ADMIN      400
#define K_REGR_SXY      332
#define K_REGR_SXX      330
#define K_REGR_SLOPE      324
#define QSTRING      532
#define K_TABLE      48
#define K_MERGE      84
#define K_UNBOUNDED      343
#define K_FIRST      96
#define K_BEGIN      410
#define K_SAMPLE      232
#define K_UNPIVOT      358
#define T_SHOW_DATABASES      5
#define K_SKIP      351
#define K_MAX      316
#define K_DBTIMEZONE      145
#define K_ROLLBACK      505
#define T_FUNCTION_NAME      21
#define K_SCHEMA      507
#define K_WAIT      350
#define T__564      564
#define T__563      563
#define T__562      562
#define K_OPTIMAL      487
#define T__561      561
#define K_ENABLE      432
#define T__560      560
#define T__558      558
#define K_BREADTH      113
#define T__559      559
#define T__556      556
#define T__557      557
#define K_SQL_CALC_FOUND_ROWS      126
#define T__554      554
#define K_NAV      282
#define T__555      555
#define K_REGR_SYY      331
#define K_FORTRAN      444
#define K_ELSE      97
#define K_LONGTEXT      177
#define K_INNER      240
#define K_YEAR      149
#define K_DISABLE      428
#define K_NAN      257
#define K_FROM      36
#define K_BETWEEN      226
#define T_LOCK_TABLE      16
#define K_MYISAM      80
#define T__553      553
#define K_MANUAL      462
#define K_NONE      479
#define K_FULLTEXT      71
#define K_ITERATE      295
#define K_INITRANS      454
#define K_WHEN      86
#define K_PERCENTILE_DISC      321
#define K_XML      357
#define K_FOREIGN      72
#define K_USER      396
#define K_EXPLAIN      438
#define K_WRITE      32
#define K_VERSIONS_XID      217
#define QS_PAREN      536
#define K_SYNONYM      393
#define K_CHANGE      414
#define EXPONENT      135
#define K_INCLUDING      452
#define K_TRUE      206
#define K_FETCH      441
#define K_STATISTICS      518
#define K_MINVALUE      470
#define K_PCTUSED      492
#define K_LANGUAGE      456
#define K_MOUNT      472
#define K_MAXLOGMEMBERS      467
#define K_VALUES      92
#define K_ORA_ROWSCN      222
#define K_OR      255
#define K_GRANT      371
#define K_CONNECT_BY_ROOT      134
#define K_ON      65
#define K_USING      78
#define K_ASC      69
#define K_VALUE      104
#define K_CLUSTER      366
#define K_EMPTY      267
#define K_AUTHORIZATION      406
#define K_UROWID      197
#define K_MEMBER      274
#define K_MAXDATAFILES      463
#define T_CREATE_TABLE_ONUPDATE      12
#define K_MAIN      288
#define K_CANCEL      413
#define T_TRANSFORM      23
#define K_ACCESS      361
#define K_STOP      519
#define K_OF      231
#define QS_BRACE      534
#define K_NUMERIC      160
#define K_FILE      370
#define K_LISTS      459
#define K_INNODB      81
#define QS_BRACK      535
#define K_MANAGE      461
#define K_ROWID      196
#define K_AUTO_INCREMENT      55
#define K_MODE      354
#define K_TRIGGERS      526
#define K_DYNAMIC      63
#define K_REGR_R2      327
#define K_STDDEV_POP      335
#define K_EXTENT      439
#define K_IMMEDIATE      373
#define K_MEASURES      289
#define K_ROLES      504
#define K_INSERT      91
#define K_MAXINSTANCES      464
#define K_RENAME      385
#define K_NVARCHAR      184
#define K_NOAUDIT      377
#define K_AUTOMATIC      292
#define K_COLUMN_VALUE      219
#define K_VERSIONS_OPERATION      218
#define K_SOME      265
#define K_NULL      54
#define K_SQL_CACHE      124
#define K_COVAR_SAMP      308
#define K_SQL_BUFFER_RESULT      123
#define K_OPEN      486
#define K_EVENTS      433
#define K_UNDER      528
#define K_ARCHIVELOG      405
#define K_CACHE      412
#define K_TABLES      25
#define K_COMPILE      419
#define K_COMPRESS      368
#define K_BYTE      180
#define GTH      260
#define K_SUM      337
#define K_SIBLINGS      303
#define K_NOCACHE      476
#define K_TO      118
#define K_COLUMN_FORMAT      61
#define K_FLOAT      170
#define K_BINARY_DOUBLE      156
#define K_EXEC      436
#define K_CURSOR      424
#define K_SELECT      105
#define K_ALTER      363
#define K_TRIGGER      394
#define K_WHERE      246
#define ML_COMMENT      552
#define K_RESPECT      341
#define K_LAST_VALUE      314
#define K_BFILE      195
#define K_SEED      234
#define K_PLS_INTEGER      188
#define K_CASE      139
#define K_DIMENSION      283
#define K_PROCEDURE      355
#define K_EXCEPTIONS      435
#define K_VAR_POP      338
#define K_SYSTEM      521
#define K_SWITCH      520
#define DOT      27
#define K_CAST      152
#define K_CROSS      242
#define K_CHECK      238
#define K_RANGE      348
#define K_DECLARE      427
#define K_MAXTRANS      468
#define K_NOARCHIVELOG      475
#define K_BECOME      408
#define K_LOCKED      352
#define K_INTERVAL      168
#define K_AVG      305
#define K_NVARCHAR2      185
#define T_CREATE_TABLE_FKEY      9
#define T_CREATE_TABLE_COLUMN_DEFAULT      13
#define K_INTEGER      200
#define DOUBLEQUOTED_STRING      224
#define NUM      548
#define K_ARCHIVE      404
#define LTH      262
#define K_SNAPSHOT      512
#define K_SUCCESSFUL      392
#define K_DATAFILE      425
#define T_CREATE_TABLE_COLUMN_DEF      14
#define K_REUSE      502
#define K_DUMP      430
#define K_VALIDATE      397
#define K_TIME      143
#define K_DROP      82
#define K_REGR_INTERCEPT      325
#define K_SECOND      148
#define K_BIGINT      204
#define K_SINGLE      284
#define K_OWN      488
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for mysqlParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
