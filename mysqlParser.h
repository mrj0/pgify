/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : mysql.g
 *     -                            On : 2010-11-13 21:50:49
 *     -                for the parser : mysqlParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser mysqlParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pmysqlParser, which is returned from a call to mysqlParserNew().
 *
 * The methods in pmysqlParser are  as follows:
 *
 *  - mysqlParser_start_rule_return      pmysqlParser->start_rule(pmysqlParser)
 *  - mysqlParser_unlock_tables_statement_return      pmysqlParser->unlock_tables_statement(pmysqlParser)
 *  - mysqlParser_lock_tables_statement_return      pmysqlParser->lock_tables_statement(pmysqlParser)
 *  - mysqlParser_lock_tables_tablename_return      pmysqlParser->lock_tables_tablename(pmysqlParser)
 *  - mysqlParser_table_lock_type_return      pmysqlParser->table_lock_type(pmysqlParser)
 *  - mysqlParser_use_database_statement_return      pmysqlParser->use_database_statement(pmysqlParser)
 *  - mysqlParser_create_database_statement_return      pmysqlParser->create_database_statement(pmysqlParser)
 *  - mysqlParser_create_database_options_return      pmysqlParser->create_database_options(pmysqlParser)
 *  - mysqlParser_create_table_statement_return      pmysqlParser->create_table_statement(pmysqlParser)
 *  - mysqlParser_table_create_like_return      pmysqlParser->table_create_like(pmysqlParser)
 *  - mysqlParser_create_definition_return      pmysqlParser->create_definition(pmysqlParser)
 *  - mysqlParser_column_definition_return      pmysqlParser->column_definition(pmysqlParser)
 *  - mysqlParser_column_definition_options_return      pmysqlParser->column_definition_options(pmysqlParser)
 *  - mysqlParser_column_definition_collate_return      pmysqlParser->column_definition_collate(pmysqlParser)
 *  - mysqlParser_column_definition_charset_return      pmysqlParser->column_definition_charset(pmysqlParser)
 *  - mysqlParser_column_definition_default_return      pmysqlParser->column_definition_default(pmysqlParser)
 *  - mysqlParser_column_definition_onupdate_return      pmysqlParser->column_definition_onupdate(pmysqlParser)
 *  - mysqlParser_column_constraint_definition_return      pmysqlParser->column_constraint_definition(pmysqlParser)
 *  - mysqlParser_constraint_primary_key_return      pmysqlParser->constraint_primary_key(pmysqlParser)
 *  - mysqlParser_constraint_unique_key_return      pmysqlParser->constraint_unique_key(pmysqlParser)
 *  - mysqlParser_constraint_unique_key_name_return      pmysqlParser->constraint_unique_key_name(pmysqlParser)
 *  - mysqlParser_constraint_index_key_return      pmysqlParser->constraint_index_key(pmysqlParser)
 *  - mysqlParser_constraint_index_colname_return      pmysqlParser->constraint_index_colname(pmysqlParser)
 *  - mysqlParser_constraint_fulltext_index_key_return      pmysqlParser->constraint_fulltext_index_key(pmysqlParser)
 *  - mysqlParser_constraint_table_key_return      pmysqlParser->constraint_table_key(pmysqlParser)
 *  - mysqlParser_constraint_reference_definition_return      pmysqlParser->constraint_reference_definition(pmysqlParser)
 *  - mysqlParser_constraint_reference_option_return      pmysqlParser->constraint_reference_option(pmysqlParser)
 *  - mysqlParser_constraint_name_return      pmysqlParser->constraint_name(pmysqlParser)
 *  - mysqlParser_index_type_return      pmysqlParser->index_type(pmysqlParser)
 *  - mysqlParser_index_option_return      pmysqlParser->index_option(pmysqlParser)
 *  - mysqlParser_table_options_return      pmysqlParser->table_options(pmysqlParser)
 *  - mysqlParser_drop_statement_return      pmysqlParser->drop_statement(pmysqlParser)
 *  - mysqlParser_delete_statement_return      pmysqlParser->delete_statement(pmysqlParser)
 *  - mysqlParser_merge_statement_return      pmysqlParser->merge_statement(pmysqlParser)
 *  - mysqlParser_merge_update_clause_return      pmysqlParser->merge_update_clause(pmysqlParser)
 *  - mysqlParser_merge_insert_clause_return      pmysqlParser->merge_insert_clause(pmysqlParser)
 *  - mysqlParser_insert_statement_return      pmysqlParser->insert_statement(pmysqlParser)
 *  - mysqlParser_single_table_insert_return      pmysqlParser->single_table_insert(pmysqlParser)
 *  - mysqlParser_insert_into_clause_return      pmysqlParser->insert_into_clause(pmysqlParser)
 *  - mysqlParser_values_clause_return      pmysqlParser->values_clause(pmysqlParser)
 *  - mysqlParser_returning_clause_return      pmysqlParser->returning_clause(pmysqlParser)
 *  - mysqlParser_multi_table_insert_return      pmysqlParser->multi_table_insert(pmysqlParser)
 *  - mysqlParser_conditional_insert_clause_return      pmysqlParser->conditional_insert_clause(pmysqlParser)
 *  - mysqlParser_dml_table_expression_clause_return      pmysqlParser->dml_table_expression_clause(pmysqlParser)
 *  - mysqlParser_error_logging_clause_return      pmysqlParser->error_logging_clause(pmysqlParser)
 *  - mysqlParser_data_item_return      pmysqlParser->data_item(pmysqlParser)
 *  - mysqlParser_update_statement_return      pmysqlParser->update_statement(pmysqlParser)
 *  - mysqlParser_update_set_clause_return      pmysqlParser->update_set_clause(pmysqlParser)
 *  - mysqlParser_select_statement_return      pmysqlParser->select_statement(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_return      pmysqlParser->subquery_factoring_clause(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_part_first_return      pmysqlParser->subquery_factoring_clause_part_first(pmysqlParser)
 *  - mysqlParser_subquery_factoring_clause_part_next_return      pmysqlParser->subquery_factoring_clause_part_next(pmysqlParser)
 *  - mysqlParser_search_clause_return      pmysqlParser->search_clause(pmysqlParser)
 *  - mysqlParser_cycle_clause_return      pmysqlParser->cycle_clause(pmysqlParser)
 *  - mysqlParser_select_hint_return      pmysqlParser->select_hint(pmysqlParser)
 *  - mysqlParser_select_list_return      pmysqlParser->select_list(pmysqlParser)
 *  - mysqlParser_displayed_column_part_first_return      pmysqlParser->displayed_column_part_first(pmysqlParser)
 *  - mysqlParser_displayed_column_part_next_return      pmysqlParser->displayed_column_part_next(pmysqlParser)
 *  - mysqlParser_displayed_column_return      pmysqlParser->displayed_column(pmysqlParser)
 *  - mysqlParser_mysql_server_variable_return      pmysqlParser->mysql_server_variable(pmysqlParser)
 *  - mysqlParser_sql_expression_return      pmysqlParser->sql_expression(pmysqlParser)
 *  - mysqlParser_expr_add_return      pmysqlParser->expr_add(pmysqlParser)
 *  - mysqlParser_expr_mul_return      pmysqlParser->expr_mul(pmysqlParser)
 *  - mysqlParser_expr_sign_return      pmysqlParser->expr_sign(pmysqlParser)
 *  - mysqlParser_expr_pow_return      pmysqlParser->expr_pow(pmysqlParser)
 *  - mysqlParser_expr_expr_return      pmysqlParser->expr_expr(pmysqlParser)
 *  - mysqlParser_expr_paren_return      pmysqlParser->expr_paren(pmysqlParser)
 *  - mysqlParser_nested_expression_return      pmysqlParser->nested_expression(pmysqlParser)
 *  - mysqlParser_function_expression_return      pmysqlParser->function_expression(pmysqlParser)
 *  - mysqlParser_call_parameters_return      pmysqlParser->call_parameters(pmysqlParser)
 *  - mysqlParser_call_parameter_return      pmysqlParser->call_parameter(pmysqlParser)
 *  - mysqlParser_parameter_name_return      pmysqlParser->parameter_name(pmysqlParser)
 *  - mysqlParser_case_expression_return      pmysqlParser->case_expression(pmysqlParser)
 *  - mysqlParser_simple_case_expression_return      pmysqlParser->simple_case_expression(pmysqlParser)
 *  - mysqlParser_searched_case_expression_return      pmysqlParser->searched_case_expression(pmysqlParser)
 *  - mysqlParser_else_case_expression_return      pmysqlParser->else_case_expression(pmysqlParser)
 *  - mysqlParser_simple_expression_return      pmysqlParser->simple_expression(pmysqlParser)
 *  - mysqlParser_subquery_return      pmysqlParser->subquery(pmysqlParser)
 *  - mysqlParser_datetime_expression_return      pmysqlParser->datetime_expression(pmysqlParser)
 *  - mysqlParser_interval_expression_return      pmysqlParser->interval_expression(pmysqlParser)
 *  - mysqlParser_special_expression_return      pmysqlParser->special_expression(pmysqlParser)
 *  - mysqlParser_cluster_set_clause_return      pmysqlParser->cluster_set_clause(pmysqlParser)
 *  - mysqlParser_cast_expression_return      pmysqlParser->cast_expression(pmysqlParser)
 *  - mysqlParser_datatype_return      pmysqlParser->datatype(pmysqlParser)
 *  - mysqlParser_r_enum_return      pmysqlParser->r_enum(pmysqlParser)
 *  - mysqlParser_r_int_return      pmysqlParser->r_int(pmysqlParser)
 *  - mysqlParser_r_tinyint_return      pmysqlParser->r_tinyint(pmysqlParser)
 *  - mysqlParser_r_smallint_return      pmysqlParser->r_smallint(pmysqlParser)
 *  - mysqlParser_bigint_return      pmysqlParser->bigint(pmysqlParser)
 *  - mysqlParser_r_unsigned_return      pmysqlParser->r_unsigned(pmysqlParser)
 *  - mysqlParser_boolean_literal_return      pmysqlParser->boolean_literal(pmysqlParser)
 *  - mysqlParser_t_alias_return      pmysqlParser->t_alias(pmysqlParser)
 *  - mysqlParser_c_alias_return      pmysqlParser->c_alias(pmysqlParser)
 *  - mysqlParser_alias_return      pmysqlParser->alias(pmysqlParser)
 *  - mysqlParser_column_spec_return      pmysqlParser->column_spec(pmysqlParser)
 *  - mysqlParser_pseudo_column_return      pmysqlParser->pseudo_column(pmysqlParser)
 *  - mysqlParser_function_name_return      pmysqlParser->function_name(pmysqlParser)
 *  - mysqlParser_identifier_return      pmysqlParser->identifier(pmysqlParser)
 *  - mysqlParser_sql_identifier_return      pmysqlParser->sql_identifier(pmysqlParser)
 *  - mysqlParser_table_reference_list_return      pmysqlParser->table_reference_list(pmysqlParser)
 *  - mysqlParser_table_reference_return      pmysqlParser->table_reference(pmysqlParser)
 *  - mysqlParser_query_table_expression_return      pmysqlParser->query_table_expression(pmysqlParser)
 *  - mysqlParser_flashback_query_clause_return      pmysqlParser->flashback_query_clause(pmysqlParser)
 *  - mysqlParser_sample_clause_return      pmysqlParser->sample_clause(pmysqlParser)
 *  - mysqlParser_partition_extension_clause_return      pmysqlParser->partition_extension_clause(pmysqlParser)
 *  - mysqlParser_subquery_restricrion_clause_return      pmysqlParser->subquery_restricrion_clause(pmysqlParser)
 *  - mysqlParser_table_collection_clause_return      pmysqlParser->table_collection_clause(pmysqlParser)
 *  - mysqlParser_table_list_return      pmysqlParser->table_list(pmysqlParser)
 *  - mysqlParser_join_clause_return      pmysqlParser->join_clause(pmysqlParser)
 *  - mysqlParser_inner_cross_join_clause_return      pmysqlParser->inner_cross_join_clause(pmysqlParser)
 *  - mysqlParser_outer_join_clause_return      pmysqlParser->outer_join_clause(pmysqlParser)
 *  - mysqlParser_query_partition_clause_return      pmysqlParser->query_partition_clause(pmysqlParser)
 *  - mysqlParser_outer_join_type_return      pmysqlParser->outer_join_type(pmysqlParser)
 *  - mysqlParser_sample_percent_return      pmysqlParser->sample_percent(pmysqlParser)
 *  - mysqlParser_seed_value_return      pmysqlParser->seed_value(pmysqlParser)
 *  - mysqlParser_table_name_return      pmysqlParser->table_name(pmysqlParser)
 *  - mysqlParser_schema_name_return      pmysqlParser->schema_name(pmysqlParser)
 *  - mysqlParser_column_specs_return      pmysqlParser->column_specs(pmysqlParser)
 *  - mysqlParser_partition_return      pmysqlParser->partition(pmysqlParser)
 *  - mysqlParser_partition_key_value_return      pmysqlParser->partition_key_value(pmysqlParser)
 *  - mysqlParser_subpartition_key_value_return      pmysqlParser->subpartition_key_value(pmysqlParser)
 *  - mysqlParser_constraint_return      pmysqlParser->constraint(pmysqlParser)
 *  - mysqlParser_collection_expression_return      pmysqlParser->collection_expression(pmysqlParser)
 *  - mysqlParser_where_clause_return      pmysqlParser->where_clause(pmysqlParser)
 *  - mysqlParser_hierarchical_query_clause_return      pmysqlParser->hierarchical_query_clause(pmysqlParser)
 *  - mysqlParser_group_by_clause_return      pmysqlParser->group_by_clause(pmysqlParser)
 *  - mysqlParser_group_by_exprs_return      pmysqlParser->group_by_exprs(pmysqlParser)
 *  - mysqlParser_group_by_expr_return      pmysqlParser->group_by_expr(pmysqlParser)
 *  - mysqlParser_rollup_cube_clause_return      pmysqlParser->rollup_cube_clause(pmysqlParser)
 *  - mysqlParser_grouping_sets_clause_return      pmysqlParser->grouping_sets_clause(pmysqlParser)
 *  - mysqlParser_grouping_sets_exprs_return      pmysqlParser->grouping_sets_exprs(pmysqlParser)
 *  - mysqlParser_grouping_sets_expr_return      pmysqlParser->grouping_sets_expr(pmysqlParser)
 *  - mysqlParser_sql_condition_return      pmysqlParser->sql_condition(pmysqlParser)
 *  - mysqlParser_condition_or_return      pmysqlParser->condition_or(pmysqlParser)
 *  - mysqlParser_condition_and_return      pmysqlParser->condition_and(pmysqlParser)
 *  - mysqlParser_condition_not_return      pmysqlParser->condition_not(pmysqlParser)
 *  - mysqlParser_condition_expr_return      pmysqlParser->condition_expr(pmysqlParser)
 *  - mysqlParser_condition_exists_return      pmysqlParser->condition_exists(pmysqlParser)
 *  - mysqlParser_condition_is_return      pmysqlParser->condition_is(pmysqlParser)
 *  - mysqlParser_condition_comparison_return      pmysqlParser->condition_comparison(pmysqlParser)
 *  - mysqlParser_condition_group_comparison_return      pmysqlParser->condition_group_comparison(pmysqlParser)
 *  - mysqlParser_condition_in_return      pmysqlParser->condition_in(pmysqlParser)
 *  - mysqlParser_condition_is_a_set_return      pmysqlParser->condition_is_a_set(pmysqlParser)
 *  - mysqlParser_condition_is_any_return      pmysqlParser->condition_is_any(pmysqlParser)
 *  - mysqlParser_condition_is_empty_return      pmysqlParser->condition_is_empty(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_return      pmysqlParser->condition_is_of_type(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_names_return      pmysqlParser->condition_is_of_type_names(pmysqlParser)
 *  - mysqlParser_condition_is_of_type_name_return      pmysqlParser->condition_is_of_type_name(pmysqlParser)
 *  - mysqlParser_condition_is_present_return      pmysqlParser->condition_is_present(pmysqlParser)
 *  - mysqlParser_condition_like_return      pmysqlParser->condition_like(pmysqlParser)
 *  - mysqlParser_condition_memeber_return      pmysqlParser->condition_memeber(pmysqlParser)
 *  - mysqlParser_condition_between_return      pmysqlParser->condition_between(pmysqlParser)
 *  - mysqlParser_condition_regexp_like_return      pmysqlParser->condition_regexp_like(pmysqlParser)
 *  - mysqlParser_condition_submultiset_return      pmysqlParser->condition_submultiset(pmysqlParser)
 *  - mysqlParser_condition_equals_path_return      pmysqlParser->condition_equals_path(pmysqlParser)
 *  - mysqlParser_condition_under_path_return      pmysqlParser->condition_under_path(pmysqlParser)
 *  - mysqlParser_levels_return      pmysqlParser->levels(pmysqlParser)
 *  - mysqlParser_correlation_integer_return      pmysqlParser->correlation_integer(pmysqlParser)
 *  - mysqlParser_path_string_return      pmysqlParser->path_string(pmysqlParser)
 *  - mysqlParser_type_name_return      pmysqlParser->type_name(pmysqlParser)
 *  - mysqlParser_integer_return      pmysqlParser->integer(pmysqlParser)
 *  - mysqlParser_column_name_return      pmysqlParser->column_name(pmysqlParser)
 *  - mysqlParser_nested_table_return      pmysqlParser->nested_table(pmysqlParser)
 *  - mysqlParser_nested_table_column_name_return      pmysqlParser->nested_table_column_name(pmysqlParser)
 *  - mysqlParser_sql_expressions_return      pmysqlParser->sql_expressions(pmysqlParser)
 *  - mysqlParser_grouping_expression_list_return      pmysqlParser->grouping_expression_list(pmysqlParser)
 *  - mysqlParser_expression_list_return      pmysqlParser->expression_list(pmysqlParser)
 *  - mysqlParser_cell_reference_return      pmysqlParser->cell_reference(pmysqlParser)
 *  - mysqlParser_condition_paren_return      pmysqlParser->condition_paren(pmysqlParser)
 *  - mysqlParser_model_clause_return      pmysqlParser->model_clause(pmysqlParser)
 *  - mysqlParser_cell_reference_options_return      pmysqlParser->cell_reference_options(pmysqlParser)
 *  - mysqlParser_return_rows_clause_return      pmysqlParser->return_rows_clause(pmysqlParser)
 *  - mysqlParser_reference_model_return      pmysqlParser->reference_model(pmysqlParser)
 *  - mysqlParser_reference_model_name_return      pmysqlParser->reference_model_name(pmysqlParser)
 *  - mysqlParser_main_model_return      pmysqlParser->main_model(pmysqlParser)
 *  - mysqlParser_main_model_name_return      pmysqlParser->main_model_name(pmysqlParser)
 *  - mysqlParser_model_column_clauses_return      pmysqlParser->model_column_clauses(pmysqlParser)
 *  - mysqlParser_model_columns_return      pmysqlParser->model_columns(pmysqlParser)
 *  - mysqlParser_model_column_return      pmysqlParser->model_column(pmysqlParser)
 *  - mysqlParser_model_rules_clause_return      pmysqlParser->model_rules_clause(pmysqlParser)
 *  - mysqlParser_model_rules_exprs_return      pmysqlParser->model_rules_exprs(pmysqlParser)
 *  - mysqlParser_model_rules_expr_return      pmysqlParser->model_rules_expr(pmysqlParser)
 *  - mysqlParser_cell_assignment_return      pmysqlParser->cell_assignment(pmysqlParser)
 *  - mysqlParser_cell_assignment_exprs_return      pmysqlParser->cell_assignment_exprs(pmysqlParser)
 *  - mysqlParser_cell_assignment_expr_return      pmysqlParser->cell_assignment_expr(pmysqlParser)
 *  - mysqlParser_measure_column_return      pmysqlParser->measure_column(pmysqlParser)
 *  - mysqlParser_single_column_for_loop_return      pmysqlParser->single_column_for_loop(pmysqlParser)
 *  - mysqlParser_pattern_return      pmysqlParser->pattern(pmysqlParser)
 *  - mysqlParser_literal_return      pmysqlParser->literal(pmysqlParser)
 *  - mysqlParser_literals_return      pmysqlParser->literals(pmysqlParser)
 *  - mysqlParser_multi_column_for_loop_return      pmysqlParser->multi_column_for_loop(pmysqlParser)
 *  - mysqlParser_bracket_literals_return      pmysqlParser->bracket_literals(pmysqlParser)
 *  - mysqlParser_bracket_literals_list_return      pmysqlParser->bracket_literals_list(pmysqlParser)
 *  - mysqlParser_union_clause_return      pmysqlParser->union_clause(pmysqlParser)
 *  - mysqlParser_order_by_clause_return      pmysqlParser->order_by_clause(pmysqlParser)
 *  - mysqlParser_order_by_clause_part_first_return      pmysqlParser->order_by_clause_part_first(pmysqlParser)
 *  - mysqlParser_order_by_clause_part_next_return      pmysqlParser->order_by_clause_part_next(pmysqlParser)
 *  - mysqlParser_limit_clause_return      pmysqlParser->limit_clause(pmysqlParser)
 *  - mysqlParser_analytic_function_name_return      pmysqlParser->analytic_function_name(pmysqlParser)
 *  - mysqlParser_analytic_function_call_return      pmysqlParser->analytic_function_call(pmysqlParser)
 *  - mysqlParser_analytic_function_return      pmysqlParser->analytic_function(pmysqlParser)
 *  - mysqlParser_analytic_clause_return      pmysqlParser->analytic_clause(pmysqlParser)
 *  - mysqlParser_windowing_clause_part_return      pmysqlParser->windowing_clause_part(pmysqlParser)
 *  - mysqlParser_windowing_clause_return      pmysqlParser->windowing_clause(pmysqlParser)
 *  - mysqlParser_for_update_clause_return      pmysqlParser->for_update_clause(pmysqlParser)
 *  - mysqlParser_for_update_clause_part_first_return      pmysqlParser->for_update_clause_part_first(pmysqlParser)
 *  - mysqlParser_for_update_clause_part_next_return      pmysqlParser->for_update_clause_part_next(pmysqlParser)
 *  - mysqlParser_lock_in_share_mode_return      pmysqlParser->lock_in_share_mode(pmysqlParser)
 *  - mysqlParser_procedure_clause_return      pmysqlParser->procedure_clause(pmysqlParser)
 *  - mysqlParser_into_file_clause_return      pmysqlParser->into_file_clause(pmysqlParser)
 *  - mysqlParser_pivot_clause_return      pmysqlParser->pivot_clause(pmysqlParser)
 *  - mysqlParser_pivot_for_clause_return      pmysqlParser->pivot_for_clause(pmysqlParser)
 *  - mysqlParser_pivot_in_clause_return      pmysqlParser->pivot_in_clause(pmysqlParser)
 *  - mysqlParser_unpivot_clause_return      pmysqlParser->unpivot_clause(pmysqlParser)
 *  - mysqlParser_unpivot_in_clause_return      pmysqlParser->unpivot_in_clause(pmysqlParser)
 *  - mysqlParser_constant_return      pmysqlParser->constant(pmysqlParser)
 *  - mysqlParser_reserved_word_return      pmysqlParser->reserved_word(pmysqlParser)
 *  - mysqlParser_keyword_return      pmysqlParser->keyword(pmysqlParser)
 *  - mysqlParser_quoted_string_return      pmysqlParser->quoted_string(pmysqlParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_mysqlParser_H
#define _mysqlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct mysqlParser_Ctx_struct mysqlParser, * pmysqlParser;



#include "pgify.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct mysqlParser_start_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_start_rule_return;

typedef struct mysqlParser_unlock_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unlock_tables_statement_return;

typedef struct mysqlParser_lock_tables_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_tables_statement_return;

typedef struct mysqlParser_lock_tables_tablename_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_tables_tablename_return;

typedef struct mysqlParser_table_lock_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_lock_type_return;

typedef struct mysqlParser_use_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_use_database_statement_return;

typedef struct mysqlParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_database_statement_return;

typedef struct mysqlParser_create_database_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_database_options_return;

typedef struct mysqlParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_table_statement_return;

typedef struct mysqlParser_table_create_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_create_like_return;

typedef struct mysqlParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_create_definition_return;

typedef struct mysqlParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_return;

typedef struct mysqlParser_column_definition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_options_return;

typedef struct mysqlParser_column_definition_collate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_collate_return;

typedef struct mysqlParser_column_definition_charset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_charset_return;

typedef struct mysqlParser_column_definition_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_default_return;

typedef struct mysqlParser_column_definition_onupdate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_definition_onupdate_return;

typedef struct mysqlParser_column_constraint_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_constraint_definition_return;

typedef struct mysqlParser_constraint_primary_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_primary_key_return;

typedef struct mysqlParser_constraint_unique_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_unique_key_return;

typedef struct mysqlParser_constraint_unique_key_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_unique_key_name_return;

typedef struct mysqlParser_constraint_index_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_index_key_return;

typedef struct mysqlParser_constraint_index_colname_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_index_colname_return;

typedef struct mysqlParser_constraint_fulltext_index_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_fulltext_index_key_return;

typedef struct mysqlParser_constraint_table_key_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_table_key_return;

typedef struct mysqlParser_constraint_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_reference_definition_return;

typedef struct mysqlParser_constraint_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_reference_option_return;

typedef struct mysqlParser_constraint_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_name_return;

typedef struct mysqlParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_index_type_return;

typedef struct mysqlParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_index_option_return;

typedef struct mysqlParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_options_return;

typedef struct mysqlParser_drop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_drop_statement_return;

typedef struct mysqlParser_delete_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_delete_statement_return;

typedef struct mysqlParser_merge_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_statement_return;

typedef struct mysqlParser_merge_update_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_update_clause_return;

typedef struct mysqlParser_merge_insert_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_merge_insert_clause_return;

typedef struct mysqlParser_insert_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_insert_statement_return;

typedef struct mysqlParser_single_table_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_single_table_insert_return;

typedef struct mysqlParser_insert_into_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_insert_into_clause_return;

typedef struct mysqlParser_values_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_values_clause_return;

typedef struct mysqlParser_returning_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_returning_clause_return;

typedef struct mysqlParser_multi_table_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_multi_table_insert_return;

typedef struct mysqlParser_conditional_insert_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_conditional_insert_clause_return;

typedef struct mysqlParser_dml_table_expression_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_dml_table_expression_clause_return;

typedef struct mysqlParser_error_logging_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_error_logging_clause_return;

typedef struct mysqlParser_data_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_data_item_return;

typedef struct mysqlParser_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_update_statement_return;

typedef struct mysqlParser_update_set_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_update_set_clause_return;

typedef struct mysqlParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_statement_return;

typedef struct mysqlParser_subquery_factoring_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_return;

typedef struct mysqlParser_subquery_factoring_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_part_first_return;

typedef struct mysqlParser_subquery_factoring_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_factoring_clause_part_next_return;

typedef struct mysqlParser_search_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_search_clause_return;

typedef struct mysqlParser_cycle_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cycle_clause_return;

typedef struct mysqlParser_select_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_hint_return;

typedef struct mysqlParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_select_list_return;

typedef struct mysqlParser_displayed_column_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_part_first_return;

typedef struct mysqlParser_displayed_column_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_part_next_return;

typedef struct mysqlParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_displayed_column_return;

typedef struct mysqlParser_mysql_server_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_mysql_server_variable_return;

typedef struct mysqlParser_sql_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_expression_return;

typedef struct mysqlParser_expr_add_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_add_return;

typedef struct mysqlParser_expr_mul_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_mul_return;

typedef struct mysqlParser_expr_sign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_sign_return;

typedef struct mysqlParser_expr_pow_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_pow_return;

typedef struct mysqlParser_expr_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_expr_return;

typedef struct mysqlParser_expr_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expr_paren_return;

typedef struct mysqlParser_nested_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_expression_return;

typedef struct mysqlParser_function_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_function_expression_return;

typedef struct mysqlParser_call_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_call_parameters_return;

typedef struct mysqlParser_call_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_call_parameter_return;

typedef struct mysqlParser_parameter_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_parameter_name_return;

typedef struct mysqlParser_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_case_expression_return;

typedef struct mysqlParser_simple_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_simple_case_expression_return;

typedef struct mysqlParser_searched_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_searched_case_expression_return;

typedef struct mysqlParser_else_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_else_case_expression_return;

typedef struct mysqlParser_simple_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_simple_expression_return;

typedef struct mysqlParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_return;

typedef struct mysqlParser_datetime_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_datetime_expression_return;

typedef struct mysqlParser_interval_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_interval_expression_return;

typedef struct mysqlParser_special_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_special_expression_return;

typedef struct mysqlParser_cluster_set_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cluster_set_clause_return;

typedef struct mysqlParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cast_expression_return;

typedef struct mysqlParser_datatype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_datatype_return;

typedef struct mysqlParser_r_enum_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_enum_return;

typedef struct mysqlParser_r_int_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_int_return;

typedef struct mysqlParser_r_tinyint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_tinyint_return;

typedef struct mysqlParser_r_smallint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_smallint_return;

typedef struct mysqlParser_bigint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bigint_return;

typedef struct mysqlParser_r_unsigned_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_r_unsigned_return;

typedef struct mysqlParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_boolean_literal_return;

typedef struct mysqlParser_t_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_t_alias_return;

typedef struct mysqlParser_c_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_c_alias_return;

typedef struct mysqlParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_alias_return;

typedef struct mysqlParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_spec_return;

typedef struct mysqlParser_pseudo_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pseudo_column_return;

typedef struct mysqlParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_function_name_return;

typedef struct mysqlParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_identifier_return;

typedef struct mysqlParser_sql_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_identifier_return;

typedef struct mysqlParser_table_reference_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_reference_list_return;

typedef struct mysqlParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_reference_return;

typedef struct mysqlParser_query_table_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_query_table_expression_return;

typedef struct mysqlParser_flashback_query_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_flashback_query_clause_return;

typedef struct mysqlParser_sample_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sample_clause_return;

typedef struct mysqlParser_partition_extension_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_extension_clause_return;

typedef struct mysqlParser_subquery_restricrion_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subquery_restricrion_clause_return;

typedef struct mysqlParser_table_collection_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_collection_clause_return;

typedef struct mysqlParser_table_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_list_return;

typedef struct mysqlParser_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_join_clause_return;

typedef struct mysqlParser_inner_cross_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_inner_cross_join_clause_return;

typedef struct mysqlParser_outer_join_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_outer_join_clause_return;

typedef struct mysqlParser_query_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_query_partition_clause_return;

typedef struct mysqlParser_outer_join_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_outer_join_type_return;

typedef struct mysqlParser_sample_percent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sample_percent_return;

typedef struct mysqlParser_seed_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_seed_value_return;

typedef struct mysqlParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_table_name_return;

typedef struct mysqlParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_schema_name_return;

typedef struct mysqlParser_column_specs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_specs_return;

typedef struct mysqlParser_partition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_return;

typedef struct mysqlParser_partition_key_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_partition_key_value_return;

typedef struct mysqlParser_subpartition_key_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_subpartition_key_value_return;

typedef struct mysqlParser_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constraint_return;

typedef struct mysqlParser_collection_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_collection_expression_return;

typedef struct mysqlParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_where_clause_return;

typedef struct mysqlParser_hierarchical_query_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_hierarchical_query_clause_return;

typedef struct mysqlParser_group_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_clause_return;

typedef struct mysqlParser_group_by_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_exprs_return;

typedef struct mysqlParser_group_by_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_group_by_expr_return;

typedef struct mysqlParser_rollup_cube_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_rollup_cube_clause_return;

typedef struct mysqlParser_grouping_sets_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_clause_return;

typedef struct mysqlParser_grouping_sets_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_exprs_return;

typedef struct mysqlParser_grouping_sets_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_sets_expr_return;

typedef struct mysqlParser_sql_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_condition_return;

typedef struct mysqlParser_condition_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_or_return;

typedef struct mysqlParser_condition_and_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_and_return;

typedef struct mysqlParser_condition_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_not_return;

typedef struct mysqlParser_condition_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_expr_return;

typedef struct mysqlParser_condition_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_exists_return;

typedef struct mysqlParser_condition_is_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_return;

typedef struct mysqlParser_condition_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_comparison_return;

typedef struct mysqlParser_condition_group_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_group_comparison_return;

typedef struct mysqlParser_condition_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_in_return;

typedef struct mysqlParser_condition_is_a_set_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_a_set_return;

typedef struct mysqlParser_condition_is_any_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_any_return;

typedef struct mysqlParser_condition_is_empty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_empty_return;

typedef struct mysqlParser_condition_is_of_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_return;

typedef struct mysqlParser_condition_is_of_type_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_names_return;

typedef struct mysqlParser_condition_is_of_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_of_type_name_return;

typedef struct mysqlParser_condition_is_present_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_is_present_return;

typedef struct mysqlParser_condition_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_like_return;

typedef struct mysqlParser_condition_memeber_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_memeber_return;

typedef struct mysqlParser_condition_between_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_between_return;

typedef struct mysqlParser_condition_regexp_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_regexp_like_return;

typedef struct mysqlParser_condition_submultiset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_submultiset_return;

typedef struct mysqlParser_condition_equals_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_equals_path_return;

typedef struct mysqlParser_condition_under_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_under_path_return;

typedef struct mysqlParser_levels_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_levels_return;

typedef struct mysqlParser_correlation_integer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_correlation_integer_return;

typedef struct mysqlParser_path_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_path_string_return;

typedef struct mysqlParser_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_type_name_return;

typedef struct mysqlParser_integer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_integer_return;

typedef struct mysqlParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_column_name_return;

typedef struct mysqlParser_nested_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_table_return;

typedef struct mysqlParser_nested_table_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_nested_table_column_name_return;

typedef struct mysqlParser_sql_expressions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_sql_expressions_return;

typedef struct mysqlParser_grouping_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_grouping_expression_list_return;

typedef struct mysqlParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_expression_list_return;

typedef struct mysqlParser_cell_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_reference_return;

typedef struct mysqlParser_condition_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_condition_paren_return;

typedef struct mysqlParser_model_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_clause_return;

typedef struct mysqlParser_cell_reference_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_reference_options_return;

typedef struct mysqlParser_return_rows_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_return_rows_clause_return;

typedef struct mysqlParser_reference_model_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reference_model_return;

typedef struct mysqlParser_reference_model_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reference_model_name_return;

typedef struct mysqlParser_main_model_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_main_model_return;

typedef struct mysqlParser_main_model_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_main_model_name_return;

typedef struct mysqlParser_model_column_clauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_column_clauses_return;

typedef struct mysqlParser_model_columns_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_columns_return;

typedef struct mysqlParser_model_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_column_return;

typedef struct mysqlParser_model_rules_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_clause_return;

typedef struct mysqlParser_model_rules_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_exprs_return;

typedef struct mysqlParser_model_rules_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_model_rules_expr_return;

typedef struct mysqlParser_cell_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_return;

typedef struct mysqlParser_cell_assignment_exprs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_exprs_return;

typedef struct mysqlParser_cell_assignment_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_cell_assignment_expr_return;

typedef struct mysqlParser_measure_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_measure_column_return;

typedef struct mysqlParser_single_column_for_loop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_single_column_for_loop_return;

typedef struct mysqlParser_pattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pattern_return;

typedef struct mysqlParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_literal_return;

typedef struct mysqlParser_literals_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_literals_return;

typedef struct mysqlParser_multi_column_for_loop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_multi_column_for_loop_return;

typedef struct mysqlParser_bracket_literals_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bracket_literals_return;

typedef struct mysqlParser_bracket_literals_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_bracket_literals_list_return;

typedef struct mysqlParser_union_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_union_clause_return;

typedef struct mysqlParser_order_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_return;

typedef struct mysqlParser_order_by_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_part_first_return;

typedef struct mysqlParser_order_by_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_order_by_clause_part_next_return;

typedef struct mysqlParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_limit_clause_return;

typedef struct mysqlParser_analytic_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_name_return;

typedef struct mysqlParser_analytic_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_call_return;

typedef struct mysqlParser_analytic_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_function_return;

typedef struct mysqlParser_analytic_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_analytic_clause_return;

typedef struct mysqlParser_windowing_clause_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_windowing_clause_part_return;

typedef struct mysqlParser_windowing_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_windowing_clause_return;

typedef struct mysqlParser_for_update_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_return;

typedef struct mysqlParser_for_update_clause_part_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_part_first_return;

typedef struct mysqlParser_for_update_clause_part_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_for_update_clause_part_next_return;

typedef struct mysqlParser_lock_in_share_mode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_lock_in_share_mode_return;

typedef struct mysqlParser_procedure_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_procedure_clause_return;

typedef struct mysqlParser_into_file_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_into_file_clause_return;

typedef struct mysqlParser_pivot_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_clause_return;

typedef struct mysqlParser_pivot_for_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_for_clause_return;

typedef struct mysqlParser_pivot_in_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_pivot_in_clause_return;

typedef struct mysqlParser_unpivot_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unpivot_clause_return;

typedef struct mysqlParser_unpivot_in_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_unpivot_in_clause_return;

typedef struct mysqlParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_constant_return;

typedef struct mysqlParser_reserved_word_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_reserved_word_return;

typedef struct mysqlParser_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_keyword_return;

typedef struct mysqlParser_quoted_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    mysqlParser_quoted_string_return;



/** Context tracking structure for mysqlParser
 */
struct mysqlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     mysqlParser_start_rule_return (*start_rule)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unlock_tables_statement_return (*unlock_tables_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_tables_statement_return (*lock_tables_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_tables_tablename_return (*lock_tables_tablename)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_lock_type_return (*table_lock_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_use_database_statement_return (*use_database_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_database_statement_return (*create_database_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_database_options_return (*create_database_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_table_statement_return (*create_table_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_create_like_return (*table_create_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_create_definition_return (*create_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_return (*column_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_options_return (*column_definition_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_collate_return (*column_definition_collate)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_charset_return (*column_definition_charset)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_default_return (*column_definition_default)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_definition_onupdate_return (*column_definition_onupdate)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_constraint_definition_return (*column_constraint_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_primary_key_return (*constraint_primary_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_unique_key_return (*constraint_unique_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_unique_key_name_return (*constraint_unique_key_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_index_key_return (*constraint_index_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_index_colname_return (*constraint_index_colname)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_fulltext_index_key_return (*constraint_fulltext_index_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_table_key_return (*constraint_table_key)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_reference_definition_return (*constraint_reference_definition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_reference_option_return (*constraint_reference_option)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_name_return (*constraint_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_index_type_return (*index_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_index_option_return (*index_option)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_options_return (*table_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_drop_statement_return (*drop_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_delete_statement_return (*delete_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_statement_return (*merge_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_update_clause_return (*merge_update_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_merge_insert_clause_return (*merge_insert_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_insert_statement_return (*insert_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_single_table_insert_return (*single_table_insert)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_insert_into_clause_return (*insert_into_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_values_clause_return (*values_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_returning_clause_return (*returning_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_multi_table_insert_return (*multi_table_insert)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_conditional_insert_clause_return (*conditional_insert_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_dml_table_expression_clause_return (*dml_table_expression_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_error_logging_clause_return (*error_logging_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_data_item_return (*data_item)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_update_statement_return (*update_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_update_set_clause_return (*update_set_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_statement_return (*select_statement)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_return (*subquery_factoring_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_part_first_return (*subquery_factoring_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_factoring_clause_part_next_return (*subquery_factoring_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_search_clause_return (*search_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cycle_clause_return (*cycle_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_hint_return (*select_hint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_select_list_return (*select_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_part_first_return (*displayed_column_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_part_next_return (*displayed_column_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_displayed_column_return (*displayed_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_mysql_server_variable_return (*mysql_server_variable)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_expression_return (*sql_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_add_return (*expr_add)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_mul_return (*expr_mul)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_sign_return (*expr_sign)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_pow_return (*expr_pow)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_expr_return (*expr_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expr_paren_return (*expr_paren)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_expression_return (*nested_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_function_expression_return (*function_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_call_parameters_return (*call_parameters)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_call_parameter_return (*call_parameter)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_parameter_name_return (*parameter_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_case_expression_return (*case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_simple_case_expression_return (*simple_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_searched_case_expression_return (*searched_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_else_case_expression_return (*else_case_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_simple_expression_return (*simple_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_return (*subquery)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_datetime_expression_return (*datetime_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_interval_expression_return (*interval_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_special_expression_return (*special_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cluster_set_clause_return (*cluster_set_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cast_expression_return (*cast_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_datatype_return (*datatype)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_enum_return (*r_enum)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_int_return (*r_int)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_tinyint_return (*r_tinyint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_smallint_return (*r_smallint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bigint_return (*bigint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_r_unsigned_return (*r_unsigned)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_boolean_literal_return (*boolean_literal)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_t_alias_return (*t_alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_c_alias_return (*c_alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_alias_return (*alias)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_spec_return (*column_spec)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pseudo_column_return (*pseudo_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_function_name_return (*function_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_identifier_return (*identifier)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_identifier_return (*sql_identifier)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_reference_list_return (*table_reference_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_reference_return (*table_reference)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_query_table_expression_return (*query_table_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_flashback_query_clause_return (*flashback_query_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sample_clause_return (*sample_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_extension_clause_return (*partition_extension_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subquery_restricrion_clause_return (*subquery_restricrion_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_collection_clause_return (*table_collection_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_list_return (*table_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_join_clause_return (*join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_inner_cross_join_clause_return (*inner_cross_join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_outer_join_clause_return (*outer_join_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_query_partition_clause_return (*query_partition_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_outer_join_type_return (*outer_join_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sample_percent_return (*sample_percent)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_seed_value_return (*seed_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_table_name_return (*table_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_schema_name_return (*schema_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_specs_return (*column_specs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_return (*partition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_partition_key_value_return (*partition_key_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_subpartition_key_value_return (*subpartition_key_value)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constraint_return (*constraint)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_collection_expression_return (*collection_expression)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_where_clause_return (*where_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_hierarchical_query_clause_return (*hierarchical_query_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_clause_return (*group_by_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_exprs_return (*group_by_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_group_by_expr_return (*group_by_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_rollup_cube_clause_return (*rollup_cube_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_clause_return (*grouping_sets_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_exprs_return (*grouping_sets_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_sets_expr_return (*grouping_sets_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_condition_return (*sql_condition)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_or_return (*condition_or)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_and_return (*condition_and)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_not_return (*condition_not)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_expr_return (*condition_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_exists_return (*condition_exists)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_return (*condition_is)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_comparison_return (*condition_comparison)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_group_comparison_return (*condition_group_comparison)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_in_return (*condition_in)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_a_set_return (*condition_is_a_set)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_any_return (*condition_is_any)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_empty_return (*condition_is_empty)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_return (*condition_is_of_type)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_names_return (*condition_is_of_type_names)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_of_type_name_return (*condition_is_of_type_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_is_present_return (*condition_is_present)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_like_return (*condition_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_memeber_return (*condition_memeber)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_between_return (*condition_between)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_regexp_like_return (*condition_regexp_like)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_submultiset_return (*condition_submultiset)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_equals_path_return (*condition_equals_path)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_under_path_return (*condition_under_path)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_levels_return (*levels)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_correlation_integer_return (*correlation_integer)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_path_string_return (*path_string)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_type_name_return (*type_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_integer_return (*integer)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_column_name_return (*column_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_table_return (*nested_table)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_nested_table_column_name_return (*nested_table_column_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_sql_expressions_return (*sql_expressions)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_grouping_expression_list_return (*grouping_expression_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_expression_list_return (*expression_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_reference_return (*cell_reference)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_condition_paren_return (*condition_paren)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_clause_return (*model_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_reference_options_return (*cell_reference_options)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_return_rows_clause_return (*return_rows_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reference_model_return (*reference_model)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reference_model_name_return (*reference_model_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_main_model_return (*main_model)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_main_model_name_return (*main_model_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_column_clauses_return (*model_column_clauses)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_columns_return (*model_columns)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_column_return (*model_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_clause_return (*model_rules_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_exprs_return (*model_rules_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_model_rules_expr_return (*model_rules_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_return (*cell_assignment)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_exprs_return (*cell_assignment_exprs)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_cell_assignment_expr_return (*cell_assignment_expr)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_measure_column_return (*measure_column)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_single_column_for_loop_return (*single_column_for_loop)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pattern_return (*pattern)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_literal_return (*literal)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_literals_return (*literals)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_multi_column_for_loop_return (*multi_column_for_loop)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bracket_literals_return (*bracket_literals)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_bracket_literals_list_return (*bracket_literals_list)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_union_clause_return (*union_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_return (*order_by_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_part_first_return (*order_by_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_order_by_clause_part_next_return (*order_by_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_limit_clause_return (*limit_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_name_return (*analytic_function_name)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_call_return (*analytic_function_call)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_function_return (*analytic_function)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_analytic_clause_return (*analytic_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_windowing_clause_part_return (*windowing_clause_part)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_windowing_clause_return (*windowing_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_return (*for_update_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_part_first_return (*for_update_clause_part_first)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_for_update_clause_part_next_return (*for_update_clause_part_next)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_lock_in_share_mode_return (*lock_in_share_mode)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_procedure_clause_return (*procedure_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_into_file_clause_return (*into_file_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_clause_return (*pivot_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_for_clause_return (*pivot_for_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_pivot_in_clause_return (*pivot_in_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unpivot_clause_return (*unpivot_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_unpivot_in_clause_return (*unpivot_in_clause)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_constant_return (*constant)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_reserved_word_return (*reserved_word)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_keyword_return (*keyword)	(struct mysqlParser_Ctx_struct * ctx);
     mysqlParser_quoted_string_return (*quoted_string)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred14_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred16_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred23_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred36_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred37_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred66_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred73_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred78_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred138_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred141_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred145_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred154_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred166_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred170_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred195_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred199_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred200_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred201_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred203_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred205_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred215_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred223_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred229_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred236_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred237_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred239_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred240_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred241_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred242_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred259_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred260_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred261_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred262_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred263_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred264_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred265_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred266_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred275_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred277_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred282_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred283_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred286_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred287_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred288_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred289_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred290_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred291_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred292_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred293_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred295_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred296_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred300_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred305_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred306_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred307_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred310_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred311_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred313_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred314_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred315_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred316_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred317_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred318_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred319_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred329_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred434_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred459_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred460_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred461_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred462_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred466_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred477_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred481_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred486_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred497_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred499_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred500_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred509_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred518_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred519_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred520_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred521_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred524_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred526_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred527_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred530_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred535_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred536_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred537_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred538_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred539_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred540_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred541_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred542_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred543_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred544_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred545_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred546_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred547_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred548_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred549_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred550_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred555_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred556_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred562_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred563_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred568_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred579_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred603_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred604_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred606_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred607_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred608_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred609_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred638_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred639_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred717_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred727_mysql)	(struct mysqlParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred729_mysql)	(struct mysqlParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct mysqlParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pmysqlParser mysqlParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pmysqlParser mysqlParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define K_BINARY_FLOAT      146
#define K_FALSE      198
#define K_LAYER      451
#define K_MONTH      141
#define K_REFERENCING      493
#define K_REGEXP_LIKE      268
#define K_TRACING      518
#define K_PARTITION      226
#define K_CONNECT      239
#define K_ZONE      135
#define K_CREATE      28
#define K_RESOURCE      379
#define K_EXISTS      40
#define K_ARRAYLEN      357
#define K_ROW_NUMBER      326
#define K_CASCADE      66
#define K_GO      443
#define K_COLUMN      360
#define RPAREN      43
#define K_USE      27
#define K_ROLE      497
#define K_STDDEV_SAMP      329
#define K_ADD      355
#define K_LEFT      235
#define K_ONLINE      374
#define K_LOW_PRIORITY      25
#define K_VIEW      391
#define K_NOCOMPRESS      371
#define K_CLOB      184
#define GEQ      253
#define EQ      80
#define K_DATETIME      158
#define K_INCLUDE      353
#define K_RAW      155
#define K_PIVOT      349
#define K_NATURAL      148
#define K_RESTRICT      65
#define DIVIDE      123
#define K_ORDER      287
#define RBRACK      291
#define BACKQUOTED_STRING      119
#define K_UNDER_PATH      271
#define K_MAXLOGFILES      459
#define K_SESSIONTIMEZONE      137
#define K_OVER      335
#define K_SHARED      505
#define K_NOMAXVALUE      471
#define K_FREELISTS      441
#define K_NUMBER      150
#define K_IDENTIFIED      365
#define K_TEXT      165
#define K_ALLOCATE      396
#define K_MAXEXTENTS      368
#define K_FREELIST      440
#define K_DENSE_RANK      304
#define K_LONG      154
#define PERCENTAGE      537
#define K_NULLS      106
#define K_CLOSE      410
#define K_INDEX      57
#define QS_ANGLE      527
#define K_NOCYCLE      240
#define K_UNTIL      289
#define SL_COMMENT      545
#define K_SEQUENCE      504
#define K_CONSTRAINT      67
#define K_TIMESTAMP      160
#define K_NOWAIT      342
#define K_NOORDER      474
#define K_SQL      132
#define K_DESC      60
#define K_MEDIUMTEXT      167
#define K_MODULE      465
#define K_LEVEL      201
#define K_FULL      234
#define K_RESTRICTED      495
#define LBRACK      290
#define K_PERCENT_RANK      312
#define K_INITIAL      367
#define K_LOG      90
#define POINT      535
#define K_PRESENT      262
#define K_RANK      315
#define K_COLLATE      35
#define K_POSITIVE      149
#define K_VERSIONS_STARTTIME      204
#define K_TINYINT      193
#define K_DOUBLE      163
#define K_DECREMENT      293
#define K_LIMIT      93
#define K_PRECISION      164
#define K_REGR_COUNT      319
#define K_BOOLEAN      156
#define K_EACH      425
#define K_BLOB      183
#define K_SEQUENTIAL      286
#define K_BACKUP      401
#define K_TEMPORARY      36
#define K_TINYBLOB      180
#define K_INTO      76
#define K_CURRENT_TIMESTAMP      525
#define K_NOSORT      477
#define K_SECTION      502
#define K_REVOKE      380
#define K_VARCHAR      172
#define PLUS      120
#define K_COMMIT      412
#define K_SHOW      393
#define K_NATIONAL      177
#define K_UNLIMITED      94
#define K_NEXT      468
#define K_THEN      79
#define K_DEPTH      103
#define K_DECIMAL      152
#define K_REFERENCE      278
#define K_UNSIGNED      196
#define K_WITH      101
#define K_IS      248
#define K_CLUSTER_SET      142
#define K_IN      258
#define MINUS      121
#define K_SUBPARTITION      228
#define SEMI      18
#define T_CREATE_TABLE_ENUM      9
#define NOT_EQ      251
#define K_IF      38
#define VERTBAR      541
#define COLON      534
#define K_TINYTEXT      166
#define K_PRECEDING      337
#define K_CURRENT      339
#define K_MEDIUMINT      192
#define K_READ      23
#define K_CONTINUE      416
#define K_CHECKPOINT      409
#define T_CREATE_TABLE      5
#define K_MODIFY      369
#define K_PRIVATE      489
#define K_NCHAR      174
#define QS_OTHER_CH      533
#define ARROW      129
#define K_MEDIUMBLOB      181
#define K_MAXVALUE      221
#define K_NTILE      311
#define K_REAL      162
#define K_LIKE4      265
#define K_LIKE2      264
#define K_PRIVILEGES      376
#define T__569      569
#define K_INT      190
#define T__568      568
#define T__567      567
#define T__566      566
#define K_AUDIT      358
#define T__565      565
#define K_CONSTRAINTS      414
#define T__574      574
#define T__575      575
#define K_REJECT      92
#define T__572      572
#define K_SEARCH      102
#define T__573      573
#define T__570      570
#define K_MIVALUE      219
#define DOUBLEDOT      536
#define T__571      571
#define K_LIKEC      263
#define K_PUBLIC      377
#define K_LINK      452
#define K_PRIMARY      47
#define K_REFERENCES      63
#define T_SERVER_VARIABLE      14
#define QUOTE      532
#define K_LOCK      20
#define K_RECOVER      492
#define T__577      577
#define T__576      576
#define T__579      579
#define T__578      578
#define K_CHARACTER      31
#define K_KEY      48
#define K_UPSERT      284
#define T__580      580
#define T__581      581
#define K_TRUNCATE      521
#define K_UPDATED      279
#define K_ALL      86
#define K_QUOTA      491
#define K_OUTER      237
#define K_A      259
#define K_FIRST_VALUE      305
#define K_END      131
#define K_GROUPING      245
#define K_COUNT      302
#define K_VAR_SAMP      332
#define K_NORESETLOGS      475
#define K_GOTO      444
#define K_UPDATE      56
#define K_SUBMULTISET      269
#define K_PCTFREE      375
#define DOUBLEVERTBAR      122
#define K_INDICATOR      447
#define K_ONLY      74
#define K_VERSIONS_ENDSCN      207
#define K_NOMINVALUE      472
#define K_PROFILE      490
#define K_STRAIGHT_JOIN      111
#define K_ENGINE      69
#define T_SELECT_STATEMENT      16
#define BACKTICK      543
#define K_RIGHT      236
#define K_EXTERNALLY      434
#define K_CONTROLFILE      417
#define K_CONTENTS      415
#define K_WORK      523
#define K_ANY      256
#define K_STORAGE      54
#define K_MLSLABEL      178
#define K_AND      220
#define K_SHARE      346
#define K_RESETLOGS      494
#define K_GROUP      242
#define K_UID      388
#define K_SQLBUF      384
#define K_LIKE      41
#define K_PLI      488
#define K_STDDEV      327
#define K_SESSION      382
#define K_XMLDATA      214
#define K_NCLOB      185
#define K_INTERSECT      294
#define K_LOGFILE      454
#define K_VERSIONS_ENDTIME      206
#define K_DELETE      64
#define K_BY      105
#define K_PRIOR      124
#define ID      34
#define K_OFFLINE      373
#define K_MODEL      272
#define K_CORR      299
#define K_LEAD      308
#define K_SET      32
#define K_DATABASE      29
#define K_PCTINCREASE      485
#define COMMA      81
#define K_VARIANCE      333
#define K_BODY      405
#define K_OBJECT_ID      211
#define K_SETS      246
#define K_INCREMENT      292
#define K_WHENEVER      392
#define QUOTED_STRING      50
#define K_CUME_DIST      303
#define K_EXCEPT      428
#define K_SQLCODE      508
#define K_CYCLE      108
#define K_RETURNING      85
#define K_SQLSTATE      510
#define K_OFF      478
#define K_NORMAL      476
#define K_CHARSET      33
#define K_SQL_BIG_RESULT      113
#define K_THE      524
#define K_SAVEPOINT      500
#define K_PERCENTILE_CONT      313
#define K_VERSIONS_STARSCN      205
#define K_REGR_AVGY      322
#define K_EXCLUDE      352
#define K_REGR_AVGX      321
#define K_COVAR_POP      300
#define K_TABLESPACE      516
#define K_MIN      310
#define K_KEEP      274
#define K_HAVING      100
#define K_COMMENT      49
#define K_FORCE      437
#define K_DEFAULT      30
#define K_PACKAGE      483
#define K_SCN      218
#define K_BEFORE      403
#define K_NOTFOUND      372
#define K_SQL_SMALL_RESULT      112
#define K_DISMOUNT      423
#define K_COBOL      411
#define K_SIZE      383
#define K_OPTION      230
#define T_CREATE_TABLE_INDEX      6
#define ASSIGN      540
#define K_IGNORE      273
#define K_ROWNUM      200
#define T_USE_DATABASE      4
#define K_ROW      340
#define K_SEGMENT      503
#define K_SQL_NO_CACHE      116
#define K_AS      22
#define K_AT      133
#define QS_OTHER      531
#define STUPID_MYSQL_TIMESTAMP      128
#define K_RATIO_TO_REPORT      316
#define LEQ      255
#define K_INFINITE      250
#define K_MAXLOGHISTORY      460
#define K_EXCLUSIVE      362
#define K_OFFSET      297
#define K_VARCHAR2      173
#define K_BLOCK      224
#define K_PARALLEL      484
#define K_FUNCTION      442
#define K_RULES      283
#define K_DEC      153
#define K_MULTISET      144
#define EOF      -1
#define K_CONNECT_BY_ISLEAF      202
#define K_SORT      507
#define K_OBJECT_VALUE      212
#define K_DATE      157
#define K_DISTINCT      97
#define K_MINUS      295
#define K_DISTINCTROW      98
#define K_LAG      306
#define K_ANALYZE      397
#define K_ERRORS      91
#define K_TYPE      261
#define K_AFTER      395
#define K_FLUSH      436
#define K_ROLLUP      243
#define NUMBER      58
#define T_CREATE_TABLE_OPTIONS      7
#define AT_SIGN      89
#define K_EXECUTE      431
#define K_FIXED      52
#define K_VARYING      170
#define K_TRANSACTION      519
#define K_PLAN      487
#define K_SQLERROR      509
#define K_NEW      467
#define K_RETURN      84
#define K_MINEXTENTS      463
#define K_SMALLINT      194
#define WS      544
#define K_LOCAL      24
#define K_CONNECT_BY_ISCYCLE      203
#define K_NOT      39
#define T_CREATE_TABLE_FULLTEXT_INDEX      10
#define K_DBA      420
#define K_BINARY_INTEGER      145
#define K_VERSIONS      216
#define K_ESCAPE      266
#define K_DAY      138
#define K_LONGBLOB      182
#define K_ROWS      280
#define K_LAST      107
#define K_CHAR      169
#define K_JOIN      232
#define K_STATEMENT_ID      511
#define K_FOLLOWING      338
#define K_FOUND      439
#define STUPID_MYSQL_DATE      127
#define K_OLD      479
#define K_UNIQUE      46
#define K_FOR      227
#define K_UNION      99
#define LLABEL      538
#define K_EQUALS_PATH      270
#define K_MATCHED      78
#define ASTERISK      118
#define LPAREN      42
#define K_ENUM      189
#define K_THREAD      517
#define RLABEL      539
#define K_GROUPS      445
#define K_INSTANCE      449
#define K_HIGH_PRIORITY      110
#define K_START      241
#define K_CUBE      244
#define K_SYSDATE      199
#define K_ROWLABEL      381
#define K_ADMIN      394
#define K_REGR_SXY      325
#define K_REGR_SXX      323
#define K_REGR_SLOPE      317
#define QSTRING      526
#define K_TABLE      37
#define K_MERGE      75
#define K_UNBOUNDED      336
#define K_FIRST      87
#define K_BEGIN      404
#define K_SAMPLE      223
#define K_UNPIVOT      351
#define K_SKIP      344
#define K_MAX      309
#define K_DBTIMEZONE      136
#define K_ROLLBACK      499
#define K_SCHEMA      501
#define T__564      564
#define K_WAIT      343
#define T__563      563
#define T__562      562
#define K_OPTIMAL      481
#define T__561      561
#define K_ENABLE      426
#define T__560      560
#define T__558      558
#define K_BREADTH      104
#define T__559      559
#define T__556      556
#define T__557      557
#define K_SQL_CALC_FOUND_ROWS      117
#define T__554      554
#define K_NAV      275
#define T__555      555
#define K_REGR_SYY      324
#define K_FORTRAN      438
#define K_ELSE      88
#define K_LONGTEXT      168
#define K_INNER      231
#define K_YEAR      140
#define K_DISABLE      422
#define K_NAN      249
#define K_FROM      73
#define K_BETWEEN      217
#define T_LOCK_TABLE      15
#define K_MYISAM      70
#define T__551      551
#define T__550      550
#define T__553      553
#define T__552      552
#define T__547      547
#define T__548      548
#define K_MANUAL      456
#define T__549      549
#define K_NONE      473
#define K_FULLTEXT      61
#define K_ITERATE      288
#define K_INITRANS      448
#define K_WHEN      77
#define K_PERCENTILE_DISC      314
#define K_XML      350
#define K_FOREIGN      62
#define K_USER      389
#define K_EXPLAIN      432
#define K_WRITE      26
#define K_VERSIONS_XID      208
#define QS_PAREN      530
#define K_SYNONYM      386
#define K_CHANGE      408
#define EXPONENT      126
#define K_INCLUDING      446
#define K_TRUE      197
#define K_FETCH      435
#define K_STATISTICS      512
#define K_MINVALUE      464
#define K_PCTUSED      486
#define K_LANGUAGE      450
#define K_MOUNT      466
#define K_MAXLOGMEMBERS      461
#define K_VALUES      83
#define K_ORA_ROWSCN      213
#define K_OR      247
#define K_GRANT      364
#define K_CONNECT_BY_ROOT      125
#define K_ON      55
#define K_USING      68
#define K_ASC      59
#define K_VALUE      95
#define K_CLUSTER      359
#define K_EMPTY      260
#define K_AUTHORIZATION      400
#define K_UROWID      188
#define K_MEMBER      267
#define K_MAXDATAFILES      457
#define T_CREATE_TABLE_ONUPDATE      11
#define K_MAIN      281
#define K_CANCEL      407
#define T_TRANSFORM      17
#define K_ACCESS      354
#define K_STOP      513
#define K_OF      222
#define QS_BRACE      528
#define K_NUMERIC      151
#define K_FILE      363
#define K_LISTS      453
#define K_INNODB      71
#define QS_BRACK      529
#define K_MANAGE      455
#define K_ROWID      187
#define K_AUTO_INCREMENT      45
#define K_MODE      347
#define K_TRIGGERS      520
#define K_DYNAMIC      53
#define K_REGR_R2      320
#define K_STDDEV_POP      328
#define K_EXTENT      433
#define K_IMMEDIATE      366
#define K_MEASURES      282
#define K_ROLES      498
#define K_INSERT      82
#define K_MAXINSTANCES      458
#define K_RENAME      378
#define K_NVARCHAR      175
#define K_NOAUDIT      370
#define K_AUTOMATIC      285
#define K_COLUMN_VALUE      210
#define K_VERSIONS_OPERATION      209
#define K_SOME      257
#define K_NULL      44
#define K_SQL_CACHE      115
#define K_COVAR_SAMP      301
#define K_SQL_BUFFER_RESULT      114
#define K_OPEN      480
#define K_EVENTS      427
#define K_UNDER      522
#define K_ARCHIVELOG      399
#define K_CACHE      406
#define K_TABLES      19
#define K_COMPILE      413
#define K_COMPRESS      361
#define K_BYTE      171
#define GTH      252
#define K_SUM      330
#define K_SIBLINGS      296
#define K_NOCACHE      470
#define K_TO      109
#define K_COLUMN_FORMAT      51
#define K_FLOAT      161
#define K_BINARY_DOUBLE      147
#define K_EXEC      430
#define K_CURSOR      418
#define K_SELECT      96
#define K_ALTER      356
#define K_TRIGGER      387
#define K_WHERE      238
#define ML_COMMENT      546
#define K_RESPECT      334
#define K_LAST_VALUE      307
#define K_BFILE      186
#define K_SEED      225
#define K_PLS_INTEGER      179
#define K_CASE      130
#define K_DIMENSION      276
#define K_PROCEDURE      348
#define K_EXCEPTIONS      429
#define K_VAR_POP      331
#define K_SYSTEM      515
#define K_SWITCH      514
#define K_CAST      143
#define DOT      21
#define K_CROSS      233
#define K_CHECK      229
#define K_RANGE      341
#define K_DECLARE      421
#define K_MAXTRANS      462
#define K_NOARCHIVELOG      469
#define K_BECOME      402
#define K_LOCKED      345
#define K_INTERVAL      159
#define K_AVG      298
#define K_NVARCHAR2      176
#define T_CREATE_TABLE_FKEY      8
#define T_CREATE_TABLE_COLUMN_DEFAULT      12
#define K_INTEGER      191
#define DOUBLEQUOTED_STRING      215
#define NUM      542
#define K_ARCHIVE      398
#define LTH      254
#define K_SNAPSHOT      506
#define K_SUCCESSFUL      385
#define K_DATAFILE      419
#define T_CREATE_TABLE_COLUMN_DEF      13
#define K_REUSE      496
#define K_DUMP      424
#define K_VALIDATE      390
#define K_TIME      134
#define K_DROP      72
#define K_REGR_INTERCEPT      318
#define K_SECOND      139
#define K_BIGINT      195
#define K_SINGLE      277
#define K_OWN      482
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for mysqlParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
