/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : mysql.g
 *     -                            On : 2010-11-18 19:59:35
 *     -                 for the lexer : mysqlLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer mysqlLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pmysqlLexer, which is returned from a call to mysqlLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pmysqlLexer are  as follows:
 *
 *  -  void      pmysqlLexer->T__557(pmysqlLexer)
 *  -  void      pmysqlLexer->T__558(pmysqlLexer)
 *  -  void      pmysqlLexer->T__559(pmysqlLexer)
 *  -  void      pmysqlLexer->T__560(pmysqlLexer)
 *  -  void      pmysqlLexer->T__561(pmysqlLexer)
 *  -  void      pmysqlLexer->T__562(pmysqlLexer)
 *  -  void      pmysqlLexer->T__563(pmysqlLexer)
 *  -  void      pmysqlLexer->T__564(pmysqlLexer)
 *  -  void      pmysqlLexer->T__565(pmysqlLexer)
 *  -  void      pmysqlLexer->T__566(pmysqlLexer)
 *  -  void      pmysqlLexer->T__567(pmysqlLexer)
 *  -  void      pmysqlLexer->T__568(pmysqlLexer)
 *  -  void      pmysqlLexer->T__569(pmysqlLexer)
 *  -  void      pmysqlLexer->T__570(pmysqlLexer)
 *  -  void      pmysqlLexer->T__571(pmysqlLexer)
 *  -  void      pmysqlLexer->T__572(pmysqlLexer)
 *  -  void      pmysqlLexer->T__573(pmysqlLexer)
 *  -  void      pmysqlLexer->T__574(pmysqlLexer)
 *  -  void      pmysqlLexer->T__575(pmysqlLexer)
 *  -  void      pmysqlLexer->T__576(pmysqlLexer)
 *  -  void      pmysqlLexer->T__577(pmysqlLexer)
 *  -  void      pmysqlLexer->T__578(pmysqlLexer)
 *  -  void      pmysqlLexer->T__579(pmysqlLexer)
 *  -  void      pmysqlLexer->T__580(pmysqlLexer)
 *  -  void      pmysqlLexer->T__581(pmysqlLexer)
 *  -  void      pmysqlLexer->T__582(pmysqlLexer)
 *  -  void      pmysqlLexer->T__583(pmysqlLexer)
 *  -  void      pmysqlLexer->T__584(pmysqlLexer)
 *  -  void      pmysqlLexer->T__585(pmysqlLexer)
 *  -  void      pmysqlLexer->T__586(pmysqlLexer)
 *  -  void      pmysqlLexer->T__587(pmysqlLexer)
 *  -  void      pmysqlLexer->T__588(pmysqlLexer)
 *  -  void      pmysqlLexer->T__589(pmysqlLexer)
 *  -  void      pmysqlLexer->T__590(pmysqlLexer)
 *  -  void      pmysqlLexer->T__591(pmysqlLexer)
 *  -  void      pmysqlLexer->T__592(pmysqlLexer)
 *  -  void      pmysqlLexer->T__593(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ACCESS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ADD(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ALL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ALTER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AND(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ANY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ARRAYLEN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ASC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AUDIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BETWEEN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CASE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHAR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHECK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CLUSTER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COLUMN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COMMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COMPRESS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONNECT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CREATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CURRENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DATETIME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DECIMAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DEFAULT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DELETE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DESC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DISTINCT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DISTINCTROW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DROP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ELSE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXCLUSIVE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXISTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FALSE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FLOAT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FOR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FROM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GRANT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GROUP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_HAVING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IDENTIFIED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IMMEDIATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INCREMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INDEX(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INITIAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INSERT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INTEGER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INTERSECT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INTO(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IF(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LEVEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LIKE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LIKE2(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LIKE4(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LIKEC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOCK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LONG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXEXTENTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MINUS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MODE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MODIFY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOAUDIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOCOMPRESS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOTFOUND(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOWAIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NULL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NUMBER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OF(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OFFLINE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ON(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ONLINE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OPTION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ORDER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PCTFREE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRIOR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRIVILEGES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PUBLIC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RAW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RENAME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RESOURCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REVOKE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROWID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROWLABEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROWNUM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROWS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SELECT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SESSION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SHARE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SIZE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SMALLINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQLBUF(pmysqlLexer)
 *  -  void      pmysqlLexer->K_START(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SUCCESSFUL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SYNONYM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SYSDATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TABLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_THEN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TO(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TINYINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MEDIUMINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRIGGER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNIQUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UPDATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_USER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VALIDATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VALUES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VARCHAR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VARCHAR2(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VIEW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WHENEVER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WHERE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WITH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TINYTEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MEDIUMTEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LONGTEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ENUM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SHOW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_A(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ADMIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AFTER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ALLOCATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ANALYZE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ARCHIVE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ARCHIVELOG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AUTHORIZATION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AUTO_INCREMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AVG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BACKUP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BECOME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BEFORE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BEGIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BIGINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BLOCK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BODY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CACHE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CANCEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CASCADE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHANGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHARACTER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHARSET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CHECKPOINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CLOSE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COBOL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COLLATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COMMIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COMPILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONSTRAINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONSTRAINTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONTENTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONTINUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONTROLFILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COLUMN_FORMAT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COUNT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CURSOR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CYCLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DATABASE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DATAFILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DAY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DBA(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DBTIMEZONE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DEC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DECLARE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DISABLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DISMOUNT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DOUBLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DUMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DYNAMIC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EACH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ENABLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_END(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ENGINE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ESCAPE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EVENTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXCEPT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXCEPTIONS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXEC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXECUTE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXPLAIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXTENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXTERNALLY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FETCH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FIXED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FLUSH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FORCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FOREIGN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FORTRAN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FOUND(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FREELIST(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FREELISTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FUNCTION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GO(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GOTO(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GROUPS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INCLUDING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INDICATOR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INITRANS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INSTANCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_KEY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LANGUAGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LAYER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LINK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LISTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOGFILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOCAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOCKED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MANAGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MANUAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAX(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXDATAFILES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXINSTANCES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXLOGFILES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXLOGHISTORY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXLOGMEMBERS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXTRANS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAXVALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MINEXTENTS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MINVALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MODULE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MONTH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MOUNT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NEW(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOARCHIVELOG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOCACHE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOCYCLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOMAXVALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOMINVALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NONE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOORDER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NORESETLOGS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NORMAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NOSORT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NUMERIC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OFF(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OLD(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ONLY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OPEN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OPTIMAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OWN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PACKAGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PARALLEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PCTINCREASE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PCTUSED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PLAN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PLI(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRECISION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRIMARY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRIVATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PROCEDURE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PROFILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_QUOTA(pmysqlLexer)
 *  -  void      pmysqlLexer->K_READ(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RECOVER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REFERENCES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REFERENCING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RESETLOGS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RESTRICT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RESTRICTED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REUSE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROLES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROLLBACK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SAVEPOINT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SCHEMA(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SCN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SECOND(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SECTION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SEGMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SEQUENCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SESSIONTIMEZONE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SHARED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SNAPSHOT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SKIP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SOME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SORT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQLCODE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQLERROR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQLSTATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STATEMENT_ID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STATISTICS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STOP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STORAGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SUM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SWITCH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SYSTEM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TABLES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TABLESPACE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TEMPORARY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_THREAD(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TIME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRACING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRANSACTION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRIGGERS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TRUNCATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNDER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNLIMITED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNTIL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_USE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_USING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WAIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WHEN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WORK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_WRITE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_YEAR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ZONE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_AUTOMATIC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BFILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BINARY_DOUBLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BINARY_FLOAT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BINARY_INTEGER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LONGBLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MEDIUMBLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TINYBLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BOOLEAN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BYTE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CAST(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CLUSTER_SET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COLUMN_VALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONNECT_BY_ISCYCLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONNECT_BY_ISLEAF(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONNECT_BY_ROOT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CORR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COVAR_POP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_COVAR_SAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CROSS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CUBE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CUME_DIST(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DECREMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DENSE_RANK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DIMENSION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EMPTY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EQUALS_PATH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FIRST_VALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FULL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_GROUPING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_IGNORE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INFINITE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INNER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INTERVAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ITERATE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_JOIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_KEEP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LAG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LAST(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LAST_VALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LEAD(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LEFT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MAIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MEASURES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MEMBER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MLSLABEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MODEL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MULTISET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NAN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NATIONAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NATURAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NAV(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NCHAR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NCLOB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NTILE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NULLS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NVARCHAR(pmysqlLexer)
 *  -  void      pmysqlLexer->K_NVARCHAR2(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OBJECT_ID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OBJECT_VALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ORA_ROWSCN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OUTER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OVER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PARTITION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PERCENTILE_CONT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PERCENTILE_DISC(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PERCENT_RANK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PIVOT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PLS_INTEGER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_POSITIVE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRESENT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RANK(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RATIO_TO_REPORT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REFERENCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGEXP_LIKE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_AVGX(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_AVGY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_COUNT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_INTERCEPT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_R2(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_SLOPE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_SXX(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_SXY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REGR_SYY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RIGHT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROLLUP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ROW_NUMBER(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RULES(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SAMPLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SEARCH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SEQUENTIAL(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SETS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SINGLE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STDDEV(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STDDEV_POP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STDDEV_SAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SUBMULTISET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SUBPARTITION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_THE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TIMESTAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_TYPE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNBOUNDED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNDER_PATH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UPDATED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UPSERT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UROWID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VARIANCE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VARYING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VAR_POP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VAR_SAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_ENDSCN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_ENDTIME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_OPERATION(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_STARSCN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_STARTTIME(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS_XID(pmysqlLexer)
 *  -  void      pmysqlLexer->K_XML(pmysqlLexer)
 *  -  void      pmysqlLexer->K_XMLDATA(pmysqlLexer)
 *  -  void      pmysqlLexer->K_ERRORS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FIRST(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LIMIT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_OFFSET(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOG(pmysqlLexer)
 *  -  void      pmysqlLexer->K_REJECT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RETURN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RETURNING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MERGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MATCHED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FOLLOWING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RANGE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SIBLINGS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNPIVOT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_UNSIGNED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_BREADTH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_DEPTH(pmysqlLexer)
 *  -  void      pmysqlLexer->K_EXCLUDE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INCLUDE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MIVALUE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_PRECEDING(pmysqlLexer)
 *  -  void      pmysqlLexer->K_RESPECT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SEED(pmysqlLexer)
 *  -  void      pmysqlLexer->K_VERSIONS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_HIGH_PRIORITY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_STRAIGHT_JOIN(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_SMALL_RESULT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_BIG_RESULT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_BUFFER_RESULT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_CACHE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_NO_CACHE(pmysqlLexer)
 *  -  void      pmysqlLexer->K_SQL_CALC_FOUND_ROWS(pmysqlLexer)
 *  -  void      pmysqlLexer->K_INNODB(pmysqlLexer)
 *  -  void      pmysqlLexer->K_MYISAM(pmysqlLexer)
 *  -  void      pmysqlLexer->K_LOW_PRIORITY(pmysqlLexer)
 *  -  void      pmysqlLexer->K_FULLTEXT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CURRENT_TIMESTAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->STUPID_MYSQL_DATE(pmysqlLexer)
 *  -  void      pmysqlLexer->STUPID_MYSQL_TIMESTAMP(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONCAT(pmysqlLexer)
 *  -  void      pmysqlLexer->K_CONCAT_WS(pmysqlLexer)
 *  -  void      pmysqlLexer->QUOTED_STRING(pmysqlLexer)
 *  -  void      pmysqlLexer->QSTRING(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_ANGLE(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_BRACE(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_BRACK(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_PAREN(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_OTHER_CH(pmysqlLexer)
 *  -  void      pmysqlLexer->QS_OTHER(pmysqlLexer)
 *  -  void      pmysqlLexer->ID(pmysqlLexer)
 *  -  void      pmysqlLexer->SEMI(pmysqlLexer)
 *  -  void      pmysqlLexer->COLON(pmysqlLexer)
 *  -  void      pmysqlLexer->DOUBLEDOT(pmysqlLexer)
 *  -  void      pmysqlLexer->DOT(pmysqlLexer)
 *  -  void      pmysqlLexer->POINT(pmysqlLexer)
 *  -  void      pmysqlLexer->COMMA(pmysqlLexer)
 *  -  void      pmysqlLexer->EXPONENT(pmysqlLexer)
 *  -  void      pmysqlLexer->ASTERISK(pmysqlLexer)
 *  -  void      pmysqlLexer->AT_SIGN(pmysqlLexer)
 *  -  void      pmysqlLexer->RPAREN(pmysqlLexer)
 *  -  void      pmysqlLexer->LPAREN(pmysqlLexer)
 *  -  void      pmysqlLexer->RBRACK(pmysqlLexer)
 *  -  void      pmysqlLexer->LBRACK(pmysqlLexer)
 *  -  void      pmysqlLexer->PLUS(pmysqlLexer)
 *  -  void      pmysqlLexer->MINUS(pmysqlLexer)
 *  -  void      pmysqlLexer->DIVIDE(pmysqlLexer)
 *  -  void      pmysqlLexer->EQ(pmysqlLexer)
 *  -  void      pmysqlLexer->PERCENTAGE(pmysqlLexer)
 *  -  void      pmysqlLexer->LLABEL(pmysqlLexer)
 *  -  void      pmysqlLexer->RLABEL(pmysqlLexer)
 *  -  void      pmysqlLexer->ASSIGN(pmysqlLexer)
 *  -  void      pmysqlLexer->ARROW(pmysqlLexer)
 *  -  void      pmysqlLexer->VERTBAR(pmysqlLexer)
 *  -  void      pmysqlLexer->DOUBLEVERTBAR(pmysqlLexer)
 *  -  void      pmysqlLexer->NOT_EQ(pmysqlLexer)
 *  -  void      pmysqlLexer->LTH(pmysqlLexer)
 *  -  void      pmysqlLexer->LEQ(pmysqlLexer)
 *  -  void      pmysqlLexer->GTH(pmysqlLexer)
 *  -  void      pmysqlLexer->GEQ(pmysqlLexer)
 *  -  void      pmysqlLexer->NUMBER(pmysqlLexer)
 *  -  void      pmysqlLexer->NUM(pmysqlLexer)
 *  -  void      pmysqlLexer->QUOTE(pmysqlLexer)
 *  -  void      pmysqlLexer->BACKTICK(pmysqlLexer)
 *  -  void      pmysqlLexer->DOUBLEQUOTED_STRING(pmysqlLexer)
 *  -  void      pmysqlLexer->BACKQUOTED_STRING(pmysqlLexer)
 *  -  void      pmysqlLexer->WS(pmysqlLexer)
 *  -  void      pmysqlLexer->SL_COMMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->MYSQL_COMMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->ML_COMMENT(pmysqlLexer)
 *  -  void      pmysqlLexer->Tokens(pmysqlLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_mysqlLexer_H
#define _mysqlLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct mysqlLexer_Ctx_struct mysqlLexer, * pmysqlLexer;



#include "pgify.h"
#include <glib.h>


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

/** Context tracking structure for mysqlLexer
 */
struct mysqlLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__557)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__558)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__559)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__560)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__561)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__562)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__563)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__564)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__565)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__566)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__567)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__568)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__569)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__570)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__571)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__572)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__573)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__574)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__575)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__576)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__577)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__578)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__579)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__580)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__581)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__582)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__583)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__584)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__585)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__586)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__587)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__588)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__589)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__590)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__591)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__592)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mT__593)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ACCESS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ADD)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ALL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ALTER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AND)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ANY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ARRAYLEN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ASC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AUDIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BETWEEN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CASE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHECK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CLUSTER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COLUMN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COMMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COMPRESS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONNECT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CREATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CURRENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DATETIME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DECIMAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DEFAULT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DELETE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DESC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DISTINCT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DISTINCTROW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DROP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ELSE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXCLUSIVE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXISTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FALSE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FLOAT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FOR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FROM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GRANT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GROUP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_HAVING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IDENTIFIED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IMMEDIATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INCREMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INDEX)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INITIAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INSERT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INTEGER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INTERSECT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INTO)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IF)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LEVEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LIKE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LIKE2)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LIKE4)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LIKEC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOCK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LONG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXEXTENTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MINUS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MODE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MODIFY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOAUDIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOCOMPRESS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOTFOUND)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOWAIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NULL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NUMBER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OF)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OFFLINE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ON)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ONLINE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OPTION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ORDER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PCTFREE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRIOR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRIVILEGES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PUBLIC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RAW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RENAME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RESOURCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REVOKE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROWID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROWLABEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROWNUM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROWS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SELECT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SESSION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SHARE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SIZE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SMALLINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQLBUF)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_START)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SUCCESSFUL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SYNONYM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SYSDATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TABLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_THEN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TO)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TINYINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MEDIUMINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRIGGER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNIQUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UPDATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_USER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VALIDATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VALUES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VARCHAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VARCHAR2)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VIEW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WHENEVER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WHERE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WITH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TINYTEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MEDIUMTEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LONGTEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ENUM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SHOW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_A)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ADMIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AFTER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ALLOCATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ANALYZE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ARCHIVE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ARCHIVELOG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AUTHORIZATION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AUTO_INCREMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AVG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BACKUP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BECOME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BEFORE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BEGIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BIGINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BLOCK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BODY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CACHE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CANCEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CASCADE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHANGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHARACTER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHARSET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CHECKPOINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CLOSE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COBOL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COLLATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COMMIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COMPILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONSTRAINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONSTRAINTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONTENTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONTINUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONTROLFILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COLUMN_FORMAT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COUNT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CURSOR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CYCLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DATABASE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DATAFILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DAY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DBA)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DBTIMEZONE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DEC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DECLARE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DISABLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DISMOUNT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DOUBLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DUMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DYNAMIC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EACH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ENABLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_END)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ENGINE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ESCAPE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EVENTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXCEPT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXCEPTIONS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXEC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXECUTE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXPLAIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXTENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXTERNALLY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FETCH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FIXED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FLUSH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FORCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FOREIGN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FORTRAN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FOUND)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FREELIST)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FREELISTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FUNCTION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GO)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GOTO)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GROUPS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INCLUDING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INDICATOR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INITRANS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INSTANCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_KEY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LANGUAGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LAYER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LINK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LISTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOGFILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOCAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOCKED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MANAGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MANUAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAX)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXDATAFILES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXINSTANCES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXLOGFILES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXLOGHISTORY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXLOGMEMBERS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXTRANS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAXVALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MINEXTENTS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MINVALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MODULE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MONTH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MOUNT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NEW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOARCHIVELOG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOCACHE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOCYCLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOMAXVALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOMINVALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NONE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOORDER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NORESETLOGS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NORMAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NOSORT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NUMERIC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OFF)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OLD)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ONLY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OPEN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OPTIMAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OWN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PACKAGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PARALLEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PCTINCREASE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PCTUSED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PLAN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PLI)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRECISION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRIMARY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRIVATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PROCEDURE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PROFILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_QUOTA)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_READ)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RECOVER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REFERENCES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REFERENCING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RESETLOGS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RESTRICT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RESTRICTED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REUSE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROLES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROLLBACK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SAVEPOINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SCHEMA)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SCN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SECOND)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SECTION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SEGMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SEQUENCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SESSIONTIMEZONE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SHARED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SNAPSHOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SKIP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SOME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SORT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQLCODE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQLERROR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQLSTATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STATEMENT_ID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STATISTICS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STOP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STORAGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SUM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SWITCH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SYSTEM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TABLES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TABLESPACE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TEMPORARY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_THREAD)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TIME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRACING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRANSACTION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRIGGERS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TRUNCATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNDER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNLIMITED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNTIL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_USE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_USING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WAIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WHEN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WORK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_WRITE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_YEAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ZONE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_AUTOMATIC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BFILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BINARY_DOUBLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BINARY_FLOAT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BINARY_INTEGER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LONGBLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MEDIUMBLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TINYBLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BOOLEAN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BYTE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CAST)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CLUSTER_SET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COLUMN_VALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONNECT_BY_ISCYCLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONNECT_BY_ISLEAF)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONNECT_BY_ROOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CORR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COVAR_POP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_COVAR_SAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CROSS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CUBE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CUME_DIST)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DECREMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DENSE_RANK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DIMENSION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EMPTY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EQUALS_PATH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FIRST_VALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FULL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_GROUPING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_IGNORE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INFINITE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INNER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INTERVAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ITERATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_JOIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_KEEP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LAG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LAST)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LAST_VALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LEAD)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LEFT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MAIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MEASURES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MEMBER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MLSLABEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MODEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MULTISET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NAN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NATIONAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NATURAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NAV)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NCHAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NCLOB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NTILE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NULLS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NVARCHAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_NVARCHAR2)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OBJECT_ID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OBJECT_VALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ORA_ROWSCN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OUTER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OVER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PARTITION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PERCENTILE_CONT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PERCENTILE_DISC)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PERCENT_RANK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PIVOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PLS_INTEGER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_POSITIVE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRESENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RANK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RATIO_TO_REPORT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REFERENCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGEXP_LIKE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_AVGX)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_AVGY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_COUNT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_INTERCEPT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_R2)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_SLOPE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_SXX)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_SXY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REGR_SYY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RIGHT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROLLUP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ROW_NUMBER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RULES)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SAMPLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SEARCH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SEQUENTIAL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SETS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SINGLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STDDEV)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STDDEV_POP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STDDEV_SAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SUBMULTISET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SUBPARTITION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_THE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TIMESTAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_TYPE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNBOUNDED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNDER_PATH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UPDATED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UPSERT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UROWID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VARIANCE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VARYING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VAR_POP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VAR_SAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_ENDSCN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_ENDTIME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_OPERATION)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_STARSCN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_STARTTIME)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS_XID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_XML)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_XMLDATA)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_ERRORS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FIRST)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LIMIT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_OFFSET)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOG)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_REJECT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RETURN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RETURNING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MERGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MATCHED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FOLLOWING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RANGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SIBLINGS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNPIVOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_UNSIGNED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_BREADTH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_DEPTH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_EXCLUDE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INCLUDE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MIVALUE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_PRECEDING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_RESPECT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SEED)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_VERSIONS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_HIGH_PRIORITY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_STRAIGHT_JOIN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_SMALL_RESULT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_BIG_RESULT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_BUFFER_RESULT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_CACHE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_NO_CACHE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_SQL_CALC_FOUND_ROWS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_INNODB)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_MYISAM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_LOW_PRIORITY)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_FULLTEXT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CURRENT_TIMESTAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mSTUPID_MYSQL_DATE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mSTUPID_MYSQL_TIMESTAMP)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONCAT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mK_CONCAT_WS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQUOTED_STRING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQSTRING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_ANGLE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_BRACE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_BRACK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_PAREN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_OTHER_CH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQS_OTHER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mID)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mSEMI)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mDOUBLEDOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mDOT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mPOINT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mEXPONENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mASTERISK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mAT_SIGN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mRPAREN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mLPAREN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mRBRACK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mLBRACK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mPLUS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mDIVIDE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mEQ)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mPERCENTAGE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mLLABEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mRLABEL)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mASSIGN)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mARROW)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mVERTBAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mDOUBLEVERTBAR)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mNOT_EQ)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mLTH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mLEQ)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mGTH)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mGEQ)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mNUMBER)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mNUM)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mQUOTE)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mBACKTICK)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mDOUBLEQUOTED_STRING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mBACKQUOTED_STRING)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mWS)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mMYSQL_COMMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct mysqlLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct mysqlLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct mysqlLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pmysqlLexer mysqlLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pmysqlLexer mysqlLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define K_BINARY_FLOAT      158
#define K_FALSE      210
#define K_LAYER      460
#define K_MONTH      153
#define K_REFERENCING      502
#define K_REGEXP_LIKE      278
#define K_TRACING      527
#define K_PARTITION      238
#define K_CONNECT      250
#define K_ZONE      147
#define K_CREATE      40
#define K_RESOURCE      389
#define K_EXISTS      52
#define K_ARRAYLEN      367
#define K_ROW_NUMBER      336
#define K_CASCADE      77
#define K_GO      452
#define K_COLUMN      370
#define RPAREN      54
#define K_USE      34
#define K_STDDEV_SAMP      339
#define K_ROLE      506
#define K_LEFT      246
#define K_ADD      365
#define K_LOW_PRIORITY      32
#define K_ONLINE      384
#define K_VIEW      401
#define K_NOCOMPRESS      381
#define K_CLOB      196
#define GEQ      264
#define K_DATETIME      170
#define EQ      90
#define K_INCLUDE      363
#define K_RAW      167
#define K_PIVOT      359
#define K_NATURAL      160
#define K_RESTRICT      76
#define K_ORDER      297
#define DIVIDE      133
#define RBRACK      301
#define BACKQUOTED_STRING      129
#define K_UNDER_PATH      281
#define K_MAXLOGFILES      468
#define K_OVER      345
#define K_SESSIONTIMEZONE      149
#define K_SHARED      514
#define K_NOMAXVALUE      480
#define K_FREELISTS      450
#define K_NUMBER      162
#define K_IDENTIFIED      375
#define K_TEXT      177
#define K_ALLOCATE      405
#define K_MAXEXTENTS      378
#define K_FREELIST      449
#define K_DENSE_RANK      314
#define K_LONG      166
#define PERCENTAGE      546
#define K_NULLS      116
#define K_CLOSE      419
#define K_INDEX      68
#define QS_ANGLE      536
#define K_NOCYCLE      251
#define T_WHERE      23
#define K_UNTIL      299
#define SL_COMMENT      554
#define K_SEQUENCE      513
#define K_CONSTRAINT      78
#define K_TIMESTAMP      172
#define K_NOWAIT      352
#define K_NOORDER      483
#define K_SQL      144
#define K_DESC      71
#define K_MEDIUMTEXT      179
#define K_MODULE      474
#define K_LEVEL      213
#define K_FULL      36
#define K_RESTRICTED      504
#define LBRACK      300
#define K_PERCENT_RANK      322
#define K_INITIAL      377
#define K_LOG      100
#define K_CONCAT_WS      140
#define POINT      544
#define K_PRESENT      272
#define K_RANK      325
#define K_COLLATE      47
#define K_POSITIVE      161
#define K_VERSIONS_STARTTIME      216
#define K_TINYINT      205
#define K_DOUBLE      175
#define K_DECREMENT      303
#define K_PRECISION      176
#define K_LIMIT      103
#define K_REGR_COUNT      329
#define K_BOOLEAN      168
#define K_SEQUENTIAL      296
#define K_BLOB      195
#define K_EACH      434
#define K_TEMPORARY      48
#define K_BACKUP      410
#define K_TINYBLOB      192
#define K_INTO      86
#define K_NOSORT      486
#define K_CURRENT_TIMESTAMP      534
#define K_REVOKE      390
#define K_SECTION      511
#define K_VARCHAR      184
#define PLUS      130
#define K_SHOW      35
#define K_COMMIT      421
#define K_NATIONAL      189
#define K_UNLIMITED      104
#define K_NEXT      477
#define K_THEN      89
#define K_DEPTH      113
#define K_REFERENCE      288
#define K_DECIMAL      164
#define K_UNSIGNED      208
#define K_IS      259
#define K_WITH      111
#define K_CLUSTER_SET      154
#define K_IN      38
#define MINUS      131
#define K_SUBPARTITION      240
#define T_SHOW_TABLES      21
#define SEMI      25
#define K_CONCAT      139
#define T_CREATE_TABLE_ENUM      10
#define NOT_EQ      262
#define K_IF      50
#define VERTBAR      550
#define K_TINYTEXT      178
#define COLON      543
#define K_PRECEDING      347
#define K_CURRENT      349
#define K_MEDIUMINT      204
#define K_READ      30
#define T_CREATE_TABLE      6
#define K_CHECKPOINT      418
#define K_CONTINUE      425
#define K_MODIFY      379
#define K_PRIVATE      498
#define K_NCHAR      186
#define K_MEDIUMBLOB      193
#define ARROW      141
#define QS_OTHER_CH      542
#define K_MAXVALUE      233
#define K_NTILE      321
#define K_REAL      174
#define K_LIKE4      275
#define K_LIKE2      274
#define K_INT      202
#define T__569      569
#define K_PRIVILEGES      386
#define T__568      568
#define T__567      567
#define T__566      566
#define T__565      565
#define K_AUDIT      368
#define T__574      574
#define K_CONSTRAINTS      423
#define T__575      575
#define T__572      572
#define K_REJECT      102
#define T__573      573
#define K_SEARCH      112
#define K_MIVALUE      231
#define T__570      570
#define T__571      571
#define DOUBLEDOT      545
#define K_LIKEC      273
#define K_PUBLIC      387
#define K_LINK      461
#define K_PRIMARY      58
#define K_REFERENCES      74
#define T_SERVER_VARIABLE      15
#define QUOTE      541
#define K_LOCK      27
#define K_RECOVER      501
#define T__577      577
#define T__576      576
#define T__579      579
#define T__578      578
#define K_KEY      59
#define T__583      583
#define K_CHARACTER      43
#define T__584      584
#define T__585      585
#define T__586      586
#define K_UPSERT      294
#define T__580      580
#define T__581      581
#define T__582      582
#define K_TRUNCATE      530
#define K_UPDATED      289
#define K_ALL      96
#define K_QUOTA      500
#define K_OUTER      248
#define K_A      269
#define K_FIRST_VALUE      315
#define K_END      143
#define K_GROUPING      256
#define K_COUNT      312
#define K_VAR_SAMP      342
#define K_NORESETLOGS      484
#define T__589      589
#define T__588      588
#define T__587      587
#define K_GOTO      453
#define K_UPDATE      67
#define K_SUBMULTISET      279
#define T__592      592
#define T__593      593
#define T__590      590
#define K_PCTFREE      385
#define T__591      591
#define DOUBLEVERTBAR      132
#define K_INDICATOR      456
#define K_ONLY      84
#define K_VERSIONS_ENDSCN      219
#define K_NOMINVALUE      481
#define K_PROFILE      499
#define K_STRAIGHT_JOIN      121
#define K_ENGINE      80
#define T_SELECT_STATEMENT      17
#define BACKTICK      552
#define K_RIGHT      247
#define MYSQL_COMMENT      555
#define K_EXTERNALLY      443
#define K_CONTROLFILE      426
#define K_CONTENTS      424
#define K_WORK      532
#define K_ANY      267
#define K_STORAGE      65
#define K_MLSLABEL      190
#define K_AND      232
#define K_SHARE      356
#define K_RESETLOGS      503
#define K_GROUP      253
#define K_UID      398
#define K_SQLBUF      394
#define K_LIKE      39
#define K_PLI      497
#define K_STDDEV      337
#define K_SESSION      392
#define K_XMLDATA      226
#define K_NCLOB      197
#define K_INTERSECT      304
#define K_LOGFILE      463
#define K_VERSIONS_ENDTIME      218
#define K_DELETE      75
#define K_BY      115
#define K_PRIOR      134
#define ID      46
#define K_OFFLINE      383
#define K_MODEL      282
#define K_CORR      309
#define K_LEAD      318
#define K_SET      44
#define K_DATABASE      41
#define K_PCTINCREASE      494
#define COMMA      91
#define K_VARIANCE      343
#define K_BODY      414
#define K_OBJECT_ID      223
#define K_SETS      257
#define K_INCREMENT      302
#define K_WHENEVER      402
#define QUOTED_STRING      61
#define K_CUME_DIST      313
#define K_EXCEPT      437
#define K_SQLCODE      517
#define K_CYCLE      118
#define K_RETURNING      95
#define K_SQLSTATE      519
#define K_OFF      487
#define K_NORMAL      485
#define K_CHARSET      45
#define K_SQL_BIG_RESULT      123
#define K_THE      533
#define K_SAVEPOINT      509
#define K_PERCENTILE_CONT      323
#define K_VERSIONS_STARSCN      217
#define K_REGR_AVGY      332
#define K_EXCLUDE      362
#define K_REGR_AVGX      331
#define K_COVAR_POP      310
#define K_TABLESPACE      525
#define K_MIN      320
#define K_KEEP      284
#define K_HAVING      110
#define K_COMMENT      60
#define K_FORCE      446
#define K_DEFAULT      42
#define K_PACKAGE      492
#define K_SCN      230
#define K_BEFORE      412
#define K_NOTFOUND      382
#define K_SQL_SMALL_RESULT      122
#define K_DISMOUNT      432
#define K_COBOL      420
#define K_SIZE      393
#define K_OPTION      242
#define T_CREATE_TABLE_INDEX      7
#define ASSIGN      549
#define K_IGNORE      283
#define K_ROWNUM      212
#define T_USE_DATABASE      4
#define K_ROW      350
#define K_SEGMENT      512
#define K_SQL_NO_CACHE      126
#define K_AS      29
#define K_AT      145
#define QS_OTHER      540
#define STUPID_MYSQL_TIMESTAMP      138
#define K_RATIO_TO_REPORT      326
#define LEQ      266
#define K_INFINITE      261
#define K_MAXLOGHISTORY      469
#define K_EXCLUSIVE      372
#define K_OFFSET      307
#define K_VARCHAR2      185
#define K_BLOCK      236
#define K_PARALLEL      493
#define K_FUNCTION      451
#define K_RULES      293
#define K_DEC      165
#define K_MULTISET      156
#define EOF      -1
#define K_CONNECT_BY_ISLEAF      214
#define K_SORT      516
#define K_OBJECT_VALUE      224
#define K_DATE      169
#define K_DISTINCT      107
#define K_MINUS      305
#define K_DISTINCTROW      108
#define K_LAG      316
#define K_ANALYZE      406
#define K_ERRORS      101
#define K_TYPE      271
#define K_AFTER      404
#define K_FLUSH      445
#define K_ROLLUP      254
#define NUMBER      69
#define T_CREATE_TABLE_OPTIONS      8
#define AT_SIGN      99
#define K_EXECUTE      440
#define K_FIXED      63
#define K_VARYING      182
#define K_TRANSACTION      528
#define K_PLAN      496
#define K_SQLERROR      518
#define K_NEW      476
#define K_RETURN      94
#define K_MINEXTENTS      472
#define K_SMALLINT      206
#define WS      553
#define K_LOCAL      31
#define K_CONNECT_BY_ISCYCLE      215
#define K_NOT      51
#define T_CREATE_TABLE_FULLTEXT_INDEX      11
#define K_DBA      429
#define K_BINARY_INTEGER      157
#define K_VERSIONS      228
#define K_ESCAPE      276
#define K_DAY      150
#define K_LONGBLOB      194
#define K_ROWS      290
#define K_LAST      117
#define K_CHAR      181
#define K_JOIN      244
#define K_STATEMENT_ID      520
#define K_FOLLOWING      348
#define K_FOUND      448
#define STUPID_MYSQL_DATE      137
#define K_OLD      488
#define K_FOR      239
#define K_UNIQUE      57
#define K_UNION      109
#define LLABEL      547
#define K_EQUALS_PATH      280
#define K_MATCHED      88
#define K_ENUM      201
#define LPAREN      53
#define ASTERISK      128
#define K_THREAD      526
#define RLABEL      548
#define K_GROUPS      454
#define K_INSTANCE      458
#define K_HIGH_PRIORITY      120
#define K_START      252
#define K_CUBE      255
#define K_SYSDATE      211
#define K_ROWLABEL      391
#define K_ADMIN      403
#define K_REGR_SXY      335
#define K_REGR_SXX      333
#define K_REGR_SLOPE      327
#define K_TABLE      49
#define QSTRING      535
#define K_MERGE      85
#define K_UNBOUNDED      346
#define K_FIRST      97
#define K_SAMPLE      235
#define K_BEGIN      413
#define K_UNPIVOT      361
#define T_SHOW_DATABASES      5
#define T_SHOW_FROM      19
#define K_SKIP      354
#define K_MAX      319
#define K_DBTIMEZONE      148
#define T_FUNCTION_NAME      22
#define K_ROLLBACK      508
#define K_SCHEMA      510
#define T__564      564
#define K_WAIT      353
#define T__563      563
#define T__562      562
#define T__561      561
#define K_OPTIMAL      490
#define T__560      560
#define K_ENABLE      435
#define T__558      558
#define T__559      559
#define K_BREADTH      114
#define T__557      557
#define K_NAV      285
#define K_SQL_CALC_FOUND_ROWS      127
#define K_REGR_SYY      334
#define K_INNER      243
#define K_LONGTEXT      180
#define K_ELSE      98
#define K_FORTRAN      447
#define K_YEAR      152
#define K_NAN      260
#define K_DISABLE      431
#define K_FROM      37
#define K_BETWEEN      229
#define T_LOCK_TABLE      16
#define K_MYISAM      81
#define K_MANUAL      465
#define K_NONE      482
#define K_ITERATE      298
#define K_FULLTEXT      72
#define K_PERCENTILE_DISC      324
#define K_WHEN      87
#define K_INITRANS      457
#define K_FOREIGN      73
#define K_XML      360
#define K_USER      399
#define K_EXPLAIN      441
#define K_VERSIONS_XID      220
#define K_WRITE      33
#define K_SYNONYM      396
#define QS_PAREN      539
#define EXPONENT      136
#define K_CHANGE      417
#define K_INCLUDING      455
#define K_TRUE      209
#define K_FETCH      444
#define K_MINVALUE      473
#define K_STATISTICS      521
#define T_SHOW_COLUMNS      20
#define K_PCTUSED      495
#define K_LANGUAGE      459
#define K_MAXLOGMEMBERS      470
#define K_MOUNT      475
#define K_OR      258
#define K_ORA_ROWSCN      225
#define K_VALUES      93
#define K_GRANT      374
#define K_ON      66
#define K_CONNECT_BY_ROOT      135
#define K_USING      79
#define K_ASC      70
#define K_VALUE      105
#define K_EMPTY      270
#define K_CLUSTER      369
#define K_AUTHORIZATION      409
#define K_MEMBER      277
#define K_UROWID      200
#define T_CREATE_TABLE_ONUPDATE      12
#define K_MAXDATAFILES      466
#define K_MAIN      291
#define T_TRANSFORM      24
#define K_CANCEL      416
#define K_ACCESS      364
#define K_STOP      522
#define K_OF      234
#define K_NUMERIC      163
#define QS_BRACE      537
#define K_FILE      373
#define K_LISTS      462
#define K_INNODB      82
#define QS_BRACK      538
#define K_ROWID      199
#define K_MANAGE      464
#define K_AUTO_INCREMENT      56
#define K_MODE      357
#define K_TRIGGERS      529
#define K_STDDEV_POP      338
#define K_REGR_R2      330
#define K_DYNAMIC      64
#define K_EXTENT      442
#define K_IMMEDIATE      376
#define K_MEASURES      292
#define K_INSERT      92
#define K_ROLES      507
#define K_MAXINSTANCES      467
#define K_RENAME      388
#define K_NVARCHAR      187
#define K_AUTOMATIC      295
#define K_NOAUDIT      380
#define K_COLUMN_VALUE      222
#define K_VERSIONS_OPERATION      221
#define K_SOME      268
#define K_NULL      55
#define K_COVAR_SAMP      311
#define K_SQL_CACHE      125
#define K_SQL_BUFFER_RESULT      124
#define K_OPEN      489
#define K_EVENTS      436
#define K_ARCHIVELOG      408
#define K_UNDER      531
#define K_CACHE      415
#define K_TABLES      26
#define K_COMPILE      422
#define K_BYTE      183
#define K_COMPRESS      371
#define K_SUM      340
#define GTH      263
#define K_SIBLINGS      306
#define K_COLUMN_FORMAT      62
#define K_TO      119
#define K_NOCACHE      479
#define K_FLOAT      173
#define K_BINARY_DOUBLE      159
#define K_EXEC      439
#define K_SELECT      106
#define K_CURSOR      427
#define K_ALTER      366
#define K_TRIGGER      397
#define K_WHERE      249
#define K_RESPECT      344
#define ML_COMMENT      556
#define K_LAST_VALUE      317
#define K_BFILE      198
#define K_SEED      237
#define K_PLS_INTEGER      191
#define K_CASE      142
#define K_DIMENSION      286
#define K_PROCEDURE      358
#define K_VAR_POP      341
#define K_EXCEPTIONS      438
#define K_SYSTEM      524
#define K_SWITCH      523
#define K_CROSS      245
#define K_CAST      155
#define DOT      28
#define T_SHOW_LIKE      18
#define K_CHECK      241
#define K_RANGE      351
#define K_DECLARE      430
#define K_MAXTRANS      471
#define K_AVG      308
#define K_INTERVAL      171
#define K_LOCKED      355
#define K_BECOME      411
#define K_NOARCHIVELOG      478
#define K_NVARCHAR2      188
#define T_CREATE_TABLE_FKEY      9
#define T_CREATE_TABLE_COLUMN_DEFAULT      13
#define K_INTEGER      203
#define DOUBLEQUOTED_STRING      227
#define NUM      551
#define K_ARCHIVE      407
#define LTH      265
#define K_SUCCESSFUL      395
#define K_SNAPSHOT      515
#define K_DATAFILE      428
#define T_CREATE_TABLE_COLUMN_DEF      14
#define K_DUMP      433
#define K_REUSE      505
#define K_VALIDATE      400
#define K_REGR_INTERCEPT      328
#define K_DROP      83
#define K_TIME      146
#define K_SECOND      151
#define K_BIGINT      207
#define K_SINGLE      287
#define K_OWN      491
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for mysqlLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
